{
	"info": {
		"_postman_id": "37cf83d4-de6b-4d83-a079-7f044389848b",
		"name": "Postman - The Complete Guide",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Example Folders - Drag an Drop - Create Sub Folders",
			"item": [
				{
					"name": "Folder within Collection",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Troubelshotting API Calls - Get Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "example.compy",
							"host": [
								"example",
								"compy"
							]
						}
					},
					"response": []
				}
			],
			"description": "Moving Get Requests from Other Collections to Someone Else",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "263711d9-c80c-47a9-93c2-4825be6633ca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "af19a0a4-391f-4e79-9eaf-88f34db41723",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Section 1 - Baisc Request + Passing Information",
			"item": [
				{
					"name": "Get - Http.org",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://httpbin.org/",
							"protocol": "http",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - https repsonse w/ query params",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/get?myparam=1&FromParamsTab=3&NewOne=4",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "myparam",
									"value": "1"
								},
								{
									"key": "FromParamsTab",
									"value": "3"
								},
								{
									"key": "NewOne",
									"value": "4"
								}
							]
						},
						"description": "Get request with https url passing query parameters"
					},
					"response": []
				},
				{
					"name": "Post - http://httpbin.org/post",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John\",\n\t\"email\": \"John@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://httpbin.org/post",
							"protocol": "http",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obtaining UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a2c775b-f0b2-465a-bda7-c3be8d59fa9a",
								"exec": [
									"let response = pm.response.json();",
									"let uuid = response.uuid;",
									"console.log(uuid);",
									"pm.globals.set(\"uuid\", uuid);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://httpbin.org/uuid",
							"protocol": "http",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						},
						"description": "Obtaining UUID from GET and setting into Global Variable"
					},
					"response": []
				},
				{
					"name": "Passing UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61549c57-98f5-446b-a9e4-eb303186170c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John\",\n\t\"email\": \"John@example.com\",\n\t\"uuid\": \"{{uuid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://httpbin.org/post",
							"protocol": "http",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"post"
							]
						},
						"description": "Passing UUID from previous request Obtaining UUID and writing a test to ensure ressponse equals 200"
					},
					"response": []
				},
				{
					"name": "Creating Collections",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "1. Export easiest way (no account required))\n2. Creating Shareable link second easiest (postman account)\n   NOTe--contents of link do not get updated\n3. Embed Button (postman account)\n4. Team Sharing (postman account) - requires team acccount, work on in future"
					},
					"response": []
				}
			],
			"description": "The requests within this section follow the Udemy Postman - Complete Guide UI Testing Section 1",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Section 2 - Requestbin + Using Requests",
			"item": [
				{
					"name": "NYC - API Assignment",
					"item": [
						{
							"name": "Get Request - Part 1 - NO Auth Passed",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									]
								},
								"description": "Get Request Passed with No Authorization - Error Code 401"
							},
							"response": []
						},
						{
							"name": "Get Request - Part 2 - Auth Passed NO Search Params",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json?api-key=KFhR2ddb5RyqZEOeeQgAFCptF53k679D",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									],
									"query": [
										{
											"key": "api-key",
											"value": "KFhR2ddb5RyqZEOeeQgAFCptF53k679D"
										}
									]
								},
								"description": "Secret Key Passed within key params but NO value of what to search for was passed\n\nError Code 400 - Bad Request - Expects some value to be passed"
							},
							"response": []
						},
						{
							"name": "Get Request - Part 3 -  Auth Passed invalid Server Params",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json?api-key=KFhR2ddb5RyqZEOeeQgAFCptF53k679D&list=Feed",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									],
									"query": [
										{
											"key": "api-key",
											"value": "KFhR2ddb5RyqZEOeeQgAFCptF53k679D"
										},
										{
											"key": "list",
											"value": "Feed"
										}
									]
								},
								"description": "Secret Key Passed within key params AND A value of what to search for was passed (guessing Param Key)\n\nError Code 400 - Bad Request - Name is not specific as part of api defined value"
							},
							"response": []
						},
						{
							"name": "Get Request - Part 4 - Auth Passed Valid Server Params - Single",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json?api-key=KFhR2ddb5RyqZEOeeQgAFCptF53k679D&list=hardcover-nonfiction",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									],
									"query": [
										{
											"key": "api-key",
											"value": "KFhR2ddb5RyqZEOeeQgAFCptF53k679D"
										},
										{
											"key": "list",
											"value": "hardcover-nonfiction"
										}
									]
								},
								"description": "Secret Key Passed within key params AND A value of what to search for was passed (guessing Param Key)\n\nUse hardcover-nonfiction as a value for list. You should get a list with multiple results.\n\nMulti Body Response with Status Code 200 - OK"
							},
							"response": []
						},
						{
							"name": "Get Request - Part 4a - Auth Passed Valid Server Params - Multi",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json?api-key=KFhR2ddb5RyqZEOeeQgAFCptF53k679D&list=hardcover-nonfiction&rank=11&published-date=2020-04-12&rank-last-week=0",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									],
									"query": [
										{
											"key": "api-key",
											"value": "KFhR2ddb5RyqZEOeeQgAFCptF53k679D"
										},
										{
											"key": "list",
											"value": "hardcover-nonfiction"
										},
										{
											"key": "rank",
											"value": "11"
										},
										{
											"key": "published-date",
											"value": "2020-04-12"
										},
										{
											"key": "rank-last-week",
											"value": "0"
										}
									]
								},
								"description": "Secret Key Passed within key params AND A value of what to search for was passed (guessing Param Key)\n\nUse hardcover-nonfiction as a value for list. You should get a list with multiple results.\n\nInspect the values you see in the response and try to figure out proper values for the following additional get parameters:\n\nrank\npublished-date\nrank-last-week\n\n\nTry to get one result listed with all parameters active!\n\nStatus Code 200 - Ok"
							},
							"response": []
						},
						{
							"name": "Options Request - Part 5 - Auth Passed Valid Search Params",
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json?api-key=KFhR2ddb5RyqZEOeeQgAFCptF53k679D&list=hardcover-nonfiction&rank=11&published-date=2020-04-12&rank-last-week=0",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									],
									"query": [
										{
											"key": "api-key",
											"value": "KFhR2ddb5RyqZEOeeQgAFCptF53k679D"
										},
										{
											"key": "list",
											"value": "hardcover-nonfiction"
										},
										{
											"key": "rank",
											"value": "11"
										},
										{
											"key": "published-date",
											"value": "2020-04-12"
										},
										{
											"key": "rank-last-week",
											"value": "0"
										}
									]
								},
								"description": "PART 1 --- Inspect the RESPONSE headers.\n\nWhich other request methods (apart from GET) are allowed when calling this resource?\n\nAccess-Control-Allow-Methods -- Get,OPTIONS so OPTIONS  also allowed when calling this API, used OPTIONS within this call"
							},
							"response": []
						},
						{
							"name": "Get Request - Part 7 Auth Passed Valid Search Params - User Agent",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json?api-key=KFhR2ddb5RyqZEOeeQgAFCptF53k679D&list=hardcover-nonfiction&rank=11&published-date=2020-04-12&rank-last-week=0",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									],
									"query": [
										{
											"key": "api-key",
											"value": "KFhR2ddb5RyqZEOeeQgAFCptF53k679D"
										},
										{
											"key": "list",
											"value": "hardcover-nonfiction"
										},
										{
											"key": "rank",
											"value": "11"
										},
										{
											"key": "published-date",
											"value": "2020-04-12"
										},
										{
											"key": "rank-last-week",
											"value": "0"
										}
									]
								},
								"description": "Inspect the REQUEST headers with the headers you are sending with Postman (and not the response header you get from the server).\n\nWhat value does the header User-Agent have?  ---ANSWER PostmanRuntime/7.22.0\n\nTip: If you do not find the header, make sure to revisit the lecture Troubleshooting inside this section.   -- POSTMAN CONSOLE"
							},
							"response": []
						},
						{
							"name": "Get Request - Part 7 Auth Passed Valid Search Params - Update User Agent Copy",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.nytimes.com/svc/books/v3/lists.json?api-key=KFhR2ddb5RyqZEOeeQgAFCptF53k679D&list=hardcover-nonfiction&rank=11&published-date=2020-04-12&rank-last-week=0",
									"protocol": "https",
									"host": [
										"api",
										"nytimes",
										"com"
									],
									"path": [
										"svc",
										"books",
										"v3",
										"lists.json"
									],
									"query": [
										{
											"key": "api-key",
											"value": "KFhR2ddb5RyqZEOeeQgAFCptF53k679D"
										},
										{
											"key": "list",
											"value": "hardcover-nonfiction"
										},
										{
											"key": "rank",
											"value": "11"
										},
										{
											"key": "published-date",
											"value": "2020-04-12"
										},
										{
											"key": "rank-last-week",
											"value": "0"
										}
									]
								},
								"description": "Inspect the REQUEST headers with the headers you are sending with Postman (and not the response header you get from the server).\n\nWhat value does the header User-Agent have?  ---ANSWER PostmanRuntime/7.22.0\n\nTip: If you do not find the header, make sure to revisit the lecture Troubleshooting inside this section."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "RequestBin - URL Decoding",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Postman request has 4 parts\n\n1. Request method - post, get, put, etc..\n2. URL where request should go\n3. Headers\n4. Body\n5. \n\nquery param ?foo=bar , foo is the key, bar is the value\n\n"
					},
					"response": []
				},
				{
					"name": "RequetBin - URL Subsitution",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Taking a lengthy URL and substituting values for ease to troubelshoot later\n\nLogic:\nhttps://enw0ub0vb8s9p.x.pipedream.net/users/5/contracts/2 --users with id 5 and contracts from that user selecting contract type 2\n\nThe above will work without any problem but in postman we can do the following\n\nrpath variables ---replace 5 with :userid and 2 with :contractid and now we can pass values, global or local set from previous requests {{gvalue}}\n\nSubmitting the request with the Path Variables the ending result will be GET - /users/5/contracts/2/"
					},
					"response": []
				},
				{
					"name": "Requestbin - Headers w/Get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Headers are comprised of Key, Value pairs.\n\nThere are already predefiend headers"
					},
					"response": []
				},
				{
					"name": "Requestbin - Headers w/Post (Body) - formData",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Do-Not-Track",
								"value": "5",
								"type": "text"
							},
							{
								"key": "my_headers",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "firstName",
									"value": "John",
									"type": "text"
								},
								{
									"key": "lastName",
									"value": "Smith",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://enw0ub0vb8s9p.x.pipedream.net/users/:userid/contracts/:contractid/?time=constant",
							"protocol": "https",
							"host": [
								"enw0ub0vb8s9p",
								"x",
								"pipedream",
								"net"
							],
							"path": [
								"users",
								":userid",
								"contracts",
								":contractid",
								""
							],
							"query": [
								{
									"key": "time",
									"value": "constant"
								}
							],
							"variable": [
								{
									"key": "userid",
									"value": "5"
								},
								{
									"key": "contractid",
									"value": "2"
								}
							]
						},
						"description": "Headers are related to what type of contents we are sending.\n\nImagine you have registration form that you want to test, with form-data you can do that. Doesnt have to do it with Restful API, Postman just supports it...\n\nFor a Post we are retreiving items from the server, so the Path Variable within the URL will not be seen on the server side"
					},
					"response": []
				},
				{
					"name": "Requestbin - Headers w/Post (Body) - form-urlencoded",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "X-Do-Not-Track",
								"value": "5",
								"type": "text"
							},
							{
								"key": "my_headers",
								"value": "2",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "middleNameURLEncoded",
									"value": "encoded\n\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://enw0ub0vb8s9p.x.pipedream.net/users/:userid/contracts/:contractid/?time=constant",
							"protocol": "https",
							"host": [
								"enw0ub0vb8s9p",
								"x",
								"pipedream",
								"net"
							],
							"path": [
								"users",
								":userid",
								"contracts",
								":contractid",
								""
							],
							"query": [
								{
									"key": "time",
									"value": "constant"
								}
							],
							"variable": [
								{
									"key": "userid",
									"value": "5"
								},
								{
									"key": "contractid",
									"value": "2"
								}
							]
						},
						"description": "The key difference between form-data nad x-ww-form-urlencoded is it will URL encode the value you submit within the request. \n\nSimilar to Get RestBin - URL Decoding request.\n\nOn the server you will see RAW form of the key value be middleNameURLEncoded=encoded%20encoded%0A%0A. Space at end is always appended\n\nPostman autoamtically adds header 'content-type'"
					},
					"response": []
				},
				{
					"name": "Requestbin - Headers w/Post (Body) - Presets",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "middleNameURLEncoded",
									"value": "encoded\n\n",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://enw0ub0vb8s9p.x.pipedream.net/users/:userid/contracts/:contractid/?time=constant",
							"protocol": "https",
							"host": [
								"enw0ub0vb8s9p",
								"x",
								"pipedream",
								"net"
							],
							"path": [
								"users",
								":userid",
								"contracts",
								":contractid",
								""
							],
							"query": [
								{
									"key": "time",
									"value": "constant"
								}
							],
							"variable": [
								{
									"key": "userid",
									"value": ""
								},
								{
									"key": "contractid",
									"value": ""
								}
							]
						},
						"description": "For Headers you can BulkEdit multiple Headers instead of doing line by line.\n\nFor Headers you can se Presets by managing your own set if you dont want to type everytime. By doing this you can simply add them from Presets drop down, select the headers you want added and it will automatically popluate in the Headers list."
					},
					"response": []
				},
				{
					"name": "Requestbin - Headers w/Post (Body) - raw",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://enw0ub0vb8s9p.x.pipedream.net/users/:userid/contracts/:contractid/?time=constant",
							"protocol": "https",
							"host": [
								"enw0ub0vb8s9p",
								"x",
								"pipedream",
								"net"
							],
							"path": [
								"users",
								":userid",
								"contracts",
								":contractid",
								""
							],
							"query": [
								{
									"key": "time",
									"value": "constant"
								}
							],
							"variable": [
								{
									"key": "userid",
									"value": "5"
								},
								{
									"key": "contractid",
									"value": "2"
								}
							]
						},
						"description": "The raw option can use various types of text, for ease we use the JSON selection option\n\nJust like previous requests we have seen the select of the type of body you are using will add a header value for you automatically.\n\nWhen raw is selected the header key, pair value added is content-type application/json\n\nYou can beautify your requesy by selecting ctrl+B...."
					},
					"response": []
				},
				{
					"name": "Requestbin - Headers w/Post (Body) - binary",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://enw0ub0vb8s9p.x.pipedream.net/users/:userid/contracts/:contractid/?time=constant",
							"protocol": "https",
							"host": [
								"enw0ub0vb8s9p",
								"x",
								"pipedream",
								"net"
							],
							"path": [
								"users",
								":userid",
								"contracts",
								":contractid",
								""
							],
							"query": [
								{
									"key": "time",
									"value": "constant"
								}
							],
							"variable": [
								{
									"key": "userid",
									"value": "5"
								},
								{
									"key": "contractid",
									"value": "2"
								}
							]
						},
						"description": "Binary is deisgned for information that you want to deisgn to API or Server buy you CANT directly enter using Postman.\n\nFor raw you could to this with JSON but it would require alot, for example sending an image would require\n\n1. opening the image \n2. get its contents\n3. PUt here in raw part\n4. Paste it\n5. Submit the request\n\nComplicated so send image and send to server using binary and on the server you will see the exact contents of that message"
					},
					"response": []
				},
				{
					"name": "Requestbin - Headers w/Post (Body) - formData -",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "text",
									"type": "file",
									"src": "/Users/JPC/Desktop/IMG_1313.JPG"
								}
							]
						},
						"url": {
							"raw": "https://enw0ub0vb8s9p.x.pipedream.net/users/:userid/contracts/:contractid/?time=constant",
							"protocol": "https",
							"host": [
								"enw0ub0vb8s9p",
								"x",
								"pipedream",
								"net"
							],
							"path": [
								"users",
								":userid",
								"contracts",
								":contractid",
								""
							],
							"query": [
								{
									"key": "time",
									"value": "constant"
								}
							],
							"variable": [
								{
									"key": "userid",
									"value": "5"
								},
								{
									"key": "contractid",
									"value": "2"
								}
							]
						},
						"description": "You can also send a file for form-data if you would like to"
					},
					"response": []
				},
				{
					"name": "Responses - analyze - API Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://httpbin.org/get?name=John&age=30",
							"protocol": "http",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "name",
									"value": "John"
								},
								{
									"key": "age",
									"value": "30"
								}
							]
						},
						"description": "Analyze responses\n\nWhat is happening with request, what is server responding with\n\nHTTP has three parts\n1. Status Code --success (200) or not (400), 2 is okay, 4 is not, or server response (500) not your fault\n2. Body -- how response is returned (pretty is nice, raw is somtimes hard to see, preivew is how we)\n3. Headers  -- in a HTTP request or response is the additional information that is transferred to the user or the server. In postman, the headers can be seen in the Headers tab\n\nSave Responses\n1. Used for API documentation"
					},
					"response": [
						{
							"name": "SAVED Example 1 - Response analyze",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://httpbin.org/get?name=John&age=30",
									"protocol": "http",
									"host": [
										"httpbin",
										"org"
									],
									"path": [
										"get"
									],
									"query": [
										{
											"key": "name",
											"value": "John"
										},
										{
											"key": "age",
											"value": "30"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 29 Mar 2020 17:21:49 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "462"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "gunicorn/19.9.0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								}
							],
							"cookie": [],
							"body": "{\n    \"args\": {\n        \"age\": \"30\",\n        \"name\": \"John\"\n    },\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Cache-Control\": \"no-cache\",\n        \"Host\": \"httpbin.org\",\n        \"Postman-Token\": \"bda1d639-8f4d-4da4-9aab-a3a11ec25f98\",\n        \"User-Agent\": \"PostmanRuntime/7.22.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5e80d92d-5914a9a02f9b87781f45aaf0\"\n    },\n    \"origin\": \"70.179.40.114\",\n    \"url\": \"http://httpbin.org/get?name=John&age=30\"\n}"
						}
					]
				},
				{
					"name": "Response - Cookies - using with Postman",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Cookies are technically just a header and are specific to the site being visited. \n\nFrom within Headers  in response Set-Cookie instructs the browser to save this cookies name, value, expiration time and domain which it is valid for\n   -when sending cookies the Cookie header is being used\n   -when receiving cookies the Set-Cookie header is being used \n      - the Set-Cookie will most likley be seen the first time in the response headers. Request bin noticed that we already have a Cookie so no reason to send Set-Cookie again\n      \nUse Cookie Manager to add and manage cookies\n\nPostman, similar to browser will keep all existing cookies"
					},
					"response": []
				},
				{
					"name": "Troubelshotting API Calls",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "In this exmaple the example.con we performed a get and the address i not valid. \n\nThe Postman Console will give any information we need."
					},
					"response": []
				}
			],
			"description": "The requests within this section follow the Udemy Postman - Complete Guide UI Testing Section 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0fb4e066-1639-4db4-a1d6-4f4cb14989ca",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66fd6564-6976-495d-abf9-410ed4a49eaa",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Section 3 - Writing Test and Scripts",
			"item": [
				{
					"name": "Path vs Query Parms",
					"item": [
						{
							"name": "Path Parameters vs. Query Parameters",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/:id?name=NewBoardName&key=9e4d55212dbc61bfd633d88b44b39f6d&token=3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										":id"
									],
									"query": [
										{
											"key": "name",
											"value": "NewBoardName"
										},
										{
											"key": "key",
											"value": "9e4d55212dbc61bfd633d88b44b39f6d"
										},
										{
											"key": "token",
											"value": "3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b"
										},
										{
											"key": "id",
											"value": "5fEoNUfU",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5fEoNUfU"
										}
									]
								},
								"description": "We are using https://www.udemy.com/course/postman-the-complete-guide/learn/lecture/12305516#bookmarks\n\nWant to use boards endpoint with updating a board in trello, it is a PUT\n\nhttps://developer.atlassian.com/cloud/trello/rest/#api-boards-id-put\n\nSays we shold use endpoint - https://api.trello.com/1/boards/{id}  --full path must be provided\n\nPUT /1/boards/{id}\n\nUpdate an existing board by id  -- trello board URL - https://trello.com/b/5fEoNUfU/myboardupdate -- ID of board 5fEoNUfU\n\nRequest\nPATH PARAMETERS   =--- PATH PARAMETERS ARE ID which is \nvalue - id \nboolean must include = REQUIRED \nobject type = string\n\nPattern: ^[0-9a-fA-F]{32}$\nQUERY PARAMETERS\nvalue = name \nobject type = string\n\nThe new name for the board. 1 to 16384 characters long.\n\n\nFinalized URL Example\nhttps://api.trello.com/1/boards/1234?name=New Board Name\n\n1. Require URL per API Documentation - https://api.trello.com/1/boards/\n2. To udpate id we add /{id} as stated in documentation\n   -Path parameters are \n     -everything with '/' OR 1234 in our example as defined in API documentation AFTER required URL\n        OR\n     -everything before '?' Queray Parameters\n3. Add Query Parameters after path parameters\n  -Query Paramteres are everyhing with ? and after are query parameters\n\n\nUpdated URL Example in Postman\n1, Path Parameters can be updated to make it easier just like query params \n2. Postman Substite URL Value is \":value\" so for this example its :id which can now be subscrituted in URL to give\nhttps://api.trello.com/1/boards/id:?name=New Board Name - as soon as you add :id you will be Path Parameters show"
							},
							"response": []
						},
						{
							"name": "Multiple Path Parameters",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/:apiversion/boards/:id?key=9e4d55212dbc61bfd633d88b44b39f6d&token=3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										":apiversion",
										"boards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "9e4d55212dbc61bfd633d88b44b39f6d"
										},
										{
											"key": "token",
											"value": "3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b"
										}
									],
									"variable": [
										{
											"key": "apiversion",
											"value": "1"
										},
										{
											"key": "id",
											"value": "5fEoNUfU"
										}
									]
								},
								"description": "We are using https://www.udemy.com/course/postman-the-complete-guide/learn/lecture/12305516#bookmarks\n\nWant to use boards endpoint with updating a board in trello, it is a PUT\n\nhttps://developer.atlassian.com/cloud/trello/rest/#api-boards-id-put\n\nSays we shold use endpoint - https://api.trello.com/1/boards/{id}  --full path must be provided\n\nURL Example in Postman for multiple Path Paramteres using ':value'\n\nhttps://api.trello.com/1/boards/{id}\n--substitute '1' and {id}\n--Note that path paramteres cant be turned on and off like query paramters as if you remove the path paramters then you change the PATH which will not be the same which would not allow you sit the endpoint / address that you want to\n\nTo obtain ID of board in trello its the numberic portion of this URL\nhttps://trello.com/b/5fEoNUfU/myboardupdate  --i.e... 5fEoNUfU"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assignment 2 - MANUAL - Creating Board, Lists and Move Cards",
					"item": [
						{
							"name": "Part 1 - Create Board",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/?name=NewBoard&key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "NewBoard"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									]
								},
								"description": "We will create a board using trello API, documentation states to use the following URL \nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-post\nAPI URL - https://api.trello.com/1/boards/?name={name}\n\nFor ease we have set global variables key and token so we can pass them easily throughout out this test. \n-EyeIcon->globals->edit and then add, set  same value for initial and current value\n-Within Query Params subsitute by using {{globalvariablename}}"
							},
							"response": []
						},
						{
							"name": "Part 1a - Get the ID of the Board Created",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5ec043f8e4c7361211493c5a"
										}
									]
								},
								"description": "Part 1a, After creating the board we want to get the id of the board\n\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-id-get\nURL - https://api.trello.com/1/boards/{id}"
							},
							"response": []
						},
						{
							"name": "Part 2 - Create List Within Board - ToDo",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/:id/lists?name=ToDoA3&key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										":id",
										"lists"
									],
									"query": [
										{
											"key": "name",
											"value": "ToDoA3"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5ec043f8e4c7361211493c5a"
										}
									]
								},
								"description": "For Part 2 we will create a list within a board\n\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-id-lists-post\nURL to use - https://api.trello.com/1/boards/{id}/lists?name={name}\nTo Obtain Id of Board we can do the following\n  -Trello URl to obtain ID - https://trello.com/b/aYFqJRcc/assignment2board  -- ID = aYFqJRcc OR\n  -In response view ID field of Board from Part 1 - Create Board request -- Example 5ec043f8e4c7361211493c5a"
							},
							"response": []
						},
						{
							"name": "Part 2a - Create List Within Board - Done",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/:id/lists?name=DoneA2&key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										":id",
										"lists"
									],
									"query": [
										{
											"key": "name",
											"value": "DoneA2"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5ec043f8e4c7361211493c5a"
										}
									]
								},
								"description": "For Part 2 we will create a list within a board\n\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-id-lists-post\nURL to use - https://api.trello.com/1/boards/{id}/lists?name={name}\nTo Obtain Id of Board we can do the following\n  -Trello URl to obtain ID - https://trello.com/b/aYFqJRcc/assignment2board  -- ID = aYFqJRcc OR\n  -In response view ID field of Board from Part 1 - Create Board request -- Example 5ec043f8e4c7361211493c5a"
							},
							"response": []
						},
						{
							"name": "Part 3 - Create New Card into List ToDo",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards?name=CardNameA2&idList=5eb6f0312cbeec898484c32a&key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards"
									],
									"query": [
										{
											"key": "name",
											"value": "CardNameA2"
										},
										{
											"key": "idList",
											"value": "5eb6f0312cbeec898484c32a"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									]
								},
								"description": "Part 3 - Create new card into list ToDo\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-cards-post\nAPI URL - https://api.trello.com/1/cards?idList=5abbe4b7ddc1b351ef961414"
							},
							"response": []
						},
						{
							"name": "Part3a - Update Card in List - ToDo",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/:id?token={{trelloToken}}&key={{trelloKey}}&name=UpdatedCardNameA2&desc=NothngToSomethingA2",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										":id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{trelloToken}}"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "name",
											"value": "UpdatedCardNameA2"
										},
										{
											"key": "desc",
											"value": "NothngToSomethingA2"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5eb6f3bf1afb2a7d93cc77c8"
										}
									]
								},
								"description": "Not originally part of Assignment but extra work to do\n\nPart 3a - Update Card in List ToDo\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-cards-id-put\nAPI URL - https://api.trello.com/1/cards/{id}"
							},
							"response": []
						},
						{
							"name": "Part 4 - Move Card to List Done",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&idList=5eb6f14768f1487a19676c21",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										},
										{
											"key": "idList",
											"value": "5eb6f14768f1487a19676c21"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5eb6f3bf1afb2a7d93cc77c8"
										}
									]
								},
								"description": "Part 4 - move the Card Created in List ToDo to List Done\n\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-cards-id-put\nURL - https://api.trello.com/1/cards/{id}"
							},
							"response": []
						},
						{
							"name": "Part 5 - Delete Card",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "5eb6f3bf1afb2a7d93cc77c8"
										}
									]
								},
								"description": "Part 5 - Delete Card \n\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-cards-id-delete\nURL - https://api.trello.com/1/cards/{id}"
							},
							"response": []
						}
					],
					"description": "Supporting Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-post\n\nFor this exercise we will do the following\n\n1. Create a new board (own request)\n2. Create Lists within Board, ToDo and Done (Own Request)\n3. Create a new card inside ToDo (own request)\n4. Move the card to Done (own request)\n5. Delete the board (own request)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3deae2f6-0bf1-4cd3-a371-a3a2d5903779",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "525b1bae-645c-4736-8ebb-b15596534ee7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "First Request - Example.com - 200 Response",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Verifying input vs outut\n\nTest only run after request has been performed, NOT BEFORE\n\nAlways test to ensure your tests faile"
					},
					"response": []
				},
				{
					"name": "Testing an API - Trello - Creating a board - Not Authorized",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=MyBoard",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "MyBoard"
								}
							]
						},
						"description": "Most API's have documentation accessible\n\n--General Site\ndevelopers.trello.com\n--API documentation\nhttps://developer.atlassian.com/cloud/trello/rest/\n--Creating a board documentation\nhttps://developer.atlassian.com/cloud/trello/rest/#api-boards-post\n--URL to pass to create board in trello\nhttps://api.trello.com/1/boards/?name={name}\n\nResponse of invalid key tells us Trello has no idea who we are, need authorization key"
					},
					"response": []
				},
				{
					"name": "Creating Trelloy board - Valid Key - NO TOKEN",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=MyBoard&key=9e4d55212dbc61bfd633d88b44b39f6d",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "MyBoard"
								},
								{
									"key": "key",
									"value": "9e4d55212dbc61bfd633d88b44b39f6d"
								}
							]
						},
						"description": "Obtain trello key from https://trello.com/app-key (key is param name you see this when you go to URL)\n\nYou must be logged in trello to obtain\n\nAPI Key - 9e4d55212dbc61bfd633d88b44b39f6d\n\nParameters are case sensitive, key != KEY\n\n\nResponse of \"unauthorized permission requested\" tells us the applicaiton has been identified BUT NOT THE USER"
					},
					"response": []
				},
				{
					"name": "Creating Trello board - Valid Key - Valid Token - Defailt Lists",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=MyBoard&key=9e4d55212dbc61bfd633d88b44b39f6d&token=3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "MyBoard"
								},
								{
									"key": "key",
									"value": "9e4d55212dbc61bfd633d88b44b39f6d"
								},
								{
									"key": "token",
									"value": "3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b"
								}
							]
						},
						"description": "To Access API Need Authprozation (both canonly be obtained when logged into trello)\n\n1. Valid API Key --identifies application\n2. Valid Token  --identified user\n\n-- choose Token option from https://trello.com/app-key, \n-- allow account from next web page (should see same user )\n\nToken - 3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b (DONT SHARE)\n\nIf defaultLists paramter is not passed within request the boolean is set to true automatically and the \"default\" set of lables will be created a long with it (To Do, Doing, Done)"
					},
					"response": []
				},
				{
					"name": "Creating Trello board - Valid Key - Valid Token - No Defailt Lists",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=MyBoard No Defaults List&key=9e4d55212dbc61bfd633d88b44b39f6d&token=3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b&defaultLists=false",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "MyBoard No Defaults List"
								},
								{
									"key": "key",
									"value": "9e4d55212dbc61bfd633d88b44b39f6d"
								},
								{
									"key": "token",
									"value": "3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b"
								},
								{
									"key": "defaultLists",
									"value": "false"
								}
							]
						},
						"description": "Passing paramter defaultLists \n\nIf defaultLists paramter is not passed within request the boolean is set to true automatically and the \"default\" set of lables will be created a long with it (To Do, Doing, Done)"
					},
					"response": []
				},
				{
					"name": "Creating Trello board - Single Tests - Single Assertion",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d46f58a-0c17-4b48-a86d-b5a823fdb608",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Board should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"SingleAssertionyMyBoard\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=SingleAssertionyMyBoard&key=9e4d55212dbc61bfd633d88b44b39f6d&token=3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b&defaultLists=false",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "SingleAssertionyMyBoard"
								},
								{
									"key": "key",
									"value": "9e4d55212dbc61bfd633d88b44b39f6d"
								},
								{
									"key": "token",
									"value": "3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b"
								},
								{
									"key": "defaultLists",
									"value": "false"
								}
							]
						},
						"description": "Testing (ensure both pass and fail)\n\n1. Status Code (this is not enough)\n2. Ensure value 'name' of board is actual name of board created (retruned in response)\n--use Response body: JSON value check\npm.test(\"Board Should be created\", function () {\n    var jsonData = pm.response.json();  --parse body into javascript object\n    pm.expect(jsonData.value).to.eql(100);  --expect json value to equal value returned in respnse\n});"
					},
					"response": []
				},
				{
					"name": "Creating Trello board - Single Tests - Multiple Assertions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8510d2e1-83bc-4251-88f2-49316cebec02",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Board should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"MyBoardMutlAssertions2\");",
									"    pm.expect(jsonData.closed).to.eql(false);",
									"    pm.expect(jsonData.pinned).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=MyBoardMutlAssertions2&key=9e4d55212dbc61bfd633d88b44b39f6d&token=3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b&defaultLists=false",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "MyBoardMutlAssertions2"
								},
								{
									"key": "key",
									"value": "9e4d55212dbc61bfd633d88b44b39f6d"
								},
								{
									"key": "token",
									"value": "3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b"
								},
								{
									"key": "defaultLists",
									"value": "false"
								}
							]
						},
						"description": "Testing (ensure both pass and fail)\n\n1. Status Code (this is not enough)\n2. Ensure value 'name' of board is actual name of board created (retruned in response)\n3. Ensure value 'closed' is actual value of response\n4. Ensure value 'pinned' is actual value of response\n\n--if assertions relation, which in this case they are, use one test with multiple assertions\npm.test(\"Board should be created\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.name).to.eql(\"MyBoardAPITests\");  --verify name\n    --add 'closed' assertion\n    --add 'pinned' assertion\n});"
					},
					"response": []
				},
				{
					"name": "Creating Trello board - Nested Objects",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8510d2e1-83bc-4251-88f2-49316cebec02",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Board should be private\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.prefs.permissionLevel).to.eql(\"private\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=MyBoardNestedObjects&key=9e4d55212dbc61bfd633d88b44b39f6d&token=3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b&defaultLists=false",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "MyBoardNestedObjects"
								},
								{
									"key": "key",
									"value": "9e4d55212dbc61bfd633d88b44b39f6d"
								},
								{
									"key": "token",
									"value": "3d299faf1a1f93e5bfb89f3df8c5ecadb599a4c653efeccca9a91d09ffe8a37b"
								},
								{
									"key": "defaultLists",
									"value": "false"
								}
							]
						},
						"description": "Testing (ensure both pass and fail) Nested Objects (this is what they are called in Java Script). \n\n--Below observe \"id\" is top level and \"prefs\" is next level down, also known in javascript as Nested Objects. We wanat to test Prefs->Permission Level->Private\n\nv \"id\": \"5e937a33e300fe2c17277994\",\n    \"name\": \"MyBoardMutlAssertions2\",\n    \"desc\": \"\",\n    \"descData\": null,\n    \"closed\": false,\n    \"idOrganization\": null,\n    \"idEnterprise\": null,\n    \"pinned\": false,\n    \"url\": \"https://trello.com/b/5oItN7rB/myboardmutlassertions2\",\n    \"shortUrl\": \"https://trello.com/b/5oItN7rB\",\nv    \"prefs\": {\n        \"permissionLevel\": \"private\",  --THIS IS WWHAT WE ARE TESTING\n        \n        \nBy doing the below check within Tests we get an error indicating the value is not defined which is basically saying that permission level is not defined at the level we are checking\n\nREquest\npm.test(\"Board should be private\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.permissionLevel).to.eql(\"private\");\n});\n\nResult\nFAIL - Board should be private | AssertionError: expected undefined to deeply equal 'private'\n\n\nSO TO GO TO TESTED OBJECT we have to navigate from first object to and go to prefs using close obects 'v' that you see abve for prefs"
					},
					"response": []
				},
				{
					"name": "Refactoring Params",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Making code cleaner to follow"
					},
					"response": []
				},
				{
					"name": "Refactoring Code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Reusing and Factoring Code - this request does nothing, just for informational services\n\npm.test(\"Board should be created\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.name).to.eql(\"SingleAssertionyMyBoard\");\n});\n\npm.test(\"Board should be private\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.prefs.permissionLevel).to.eql(\"private\");\n});\n\n\nNotice above that var jsonData = pm.response.json(); is common to both. Can be remove and make code cleaner. Then can add console.log to end if you are troubelshooting\n\nvar jsonData = pm.response.json();\n  \npm.test(\"Board should be created\", function () {\n    pm.expect(jsonData.name).to.eql(\"SingleAssertionyMyBoard\");\n});\n\npm.test(\"Board should be private\", function () {\n    pm.expect(jsonData.prefs.permissionLevel).to.eql(\"private\");\n});\n\nconsole.log(jsonData);\n\n----TIPS-----\nmay want to rename var jsonData to const response since its really a constanct and response-- final view will look like \n\nconst response = pm.response.json();\n  \npm.test(\"Board should be created\", function () {\n    pm.expect(response.name).to.eql(\"SingleAssertionyMyBoard\");\n});\n\npm.test(\"Board should be private\", function () {\n    pm.expect(response.prefs.permissionLevel).to.eql(\"private\");\n});\n\nconsole.log(response);"
					},
					"response": []
				}
			],
			"description": "The requests within this section follow the Udemy Postman - Complete Guide UI Testing Section 23",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fd63e6ce-0df7-46e3-bd01-61d13cddc9f5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a4307504-41d0-4fef-bdcc-c56f3369a26d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Section 4 - Writing tests and scripts using variables",
			"item": [
				{
					"name": "Assignment 3 - Dynamic Requests (Create Board, Lists, Move Cards)",
					"item": [
						{
							"name": "Part 1 - Create Board - Dynamic Creation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a963b970-5912-4e00-8361-e5d16561cf8c",
										"exec": [
											"const boardName = getRandomBoardName(); ",
											"",
											"pm.environment.set(\"boardName\", boardName);",
											"",
											"function getRandomBoardName () {",
											"    return \"My new board \" + parseInt(Math.random() * 10000);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "18b9f3c8-459b-4a63-a223-3f6321086a77",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Verify Dynamic Board Name\", function () {",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"boardName\"));",
											"});",
											"",
											"const boardID = response.id;",
											"pm.environment.get(boardID);",
											"pm.environment.set(\"boardID\", boardID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{boardName}}"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									]
								},
								"description": "We will create a board using trello API, documentation states to use the following URL API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-post API URL - https://api.trello.com/1/boards/?name={name}"
							},
							"response": []
						},
						{
							"name": "Part 1a - Dynamic get boardID created in Part 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19ce3891-3114-4b8f-8de4-78ce588c2745",
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Verify Dynamic Board Name from Part 1\", function () {",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"boardID\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{boardID}}"
										}
									]
								},
								"description": "API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-id-get\nURL - https://api.trello.com/1/boards/{id}"
							},
							"response": []
						},
						{
							"name": "Part 2 - Create List within Dynamin Board from Part 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e4ecb02e-471f-4476-85cc-cb4a26ad6e2a",
										"exec": [
											"const listName = getRandomListName(); ",
											"",
											"pm.environment.set(\"listName\", listName);",
											"",
											"function getRandomListName () {",
											"    return \"My new list \" + parseInt(Math.random() * 10000);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b992c032-fe3b-412e-874f-91c2f0d3d8e0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Verify Dynamic List Name\", function () {",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"listName\"));",
											"});",
											"",
											"const listID = response.id;",
											"pm.environment.get(listID);",
											"pm.environment.set(\"listID\", listID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/:id/lists?name={{listName}}&key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										":id",
										"lists"
									],
									"query": [
										{
											"key": "name",
											"value": "{{listName}}"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{boardID}}"
										}
									]
								},
								"description": "API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-id-lists-post \nURL to use - https://api.trello.com/1/boards/{id}/lists?name={name}"
							},
							"response": []
						},
						{
							"name": "Part 3 - Create Card in Dynamic List (listID)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "40a3306a-8aeb-4819-b775-34e939d6ea0f",
										"exec": [
											"const cardName = getRandomCardName(); ",
											"",
											"pm.environment.set(\"cardName\", cardName);",
											"",
											"function getRandomCardName () {",
											"    return \"My new card \" + parseInt(Math.random() * 10000);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ca34bdb1-7fe3-4447-83b3-54d7e780c4d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Verify Dynamic Card Name\", function () {",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"cardName\"));",
											"});",
											"",
											"const cardID = response.id;",
											"pm.environment.get(cardID);",
											"pm.environment.set(\"cardID\", cardID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards?name={{cardName}}&idList={{listID}}&key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards"
									],
									"query": [
										{
											"key": "name",
											"value": "{{cardName}}"
										},
										{
											"key": "idList",
											"value": "{{listID}}"
										},
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									]
								},
								"description": "API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-cards-post API URL - https://api.trello.com/1/cards?idList=5abbe4b7ddc1b351ef961414"
							},
							"response": []
						},
						{
							"name": "Part 3a - Update Card Name using Dynamic Card (cardName)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "43cf236b-c131-4441-83b4-144fda8a74e2",
										"exec": [
											"const updatedCardName = updateOriginalCardName(); ",
											"",
											"pm.environment.set(\"updatedCardName\", updatedCardName);",
											"",
											"function updateOriginalCardName () {",
											"    return \"Update attempt\" + \" \"+ parseInt(Math.random() * 100) + ",
											"                                      \" \" +  pm.environment.get(\"cardName\");",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3ab9100-fb7e-4ac9-9a59-3134be28f209",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Verify Udpated Card Name\", function () {",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"updatedCardName\"));",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&name={{updatedCardName}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										},
										{
											"key": "name",
											"value": "{{updatedCardName}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{cardID}}"
										}
									]
								},
								"description": "Part 3a - Update Card in List  \nhttps://developer.atlassian.com/cloud/trello/rest/#api-cards-id-put \nAPI URL - https://api.trello.com/1/cards/{id}"
							},
							"response": []
						},
						{
							"name": "Part 4 - Move Dynamic Card to List Done - Get Board ID 'Done'",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c69a2e7c-b0aa-4908-9b39-b49027f12791",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1ff5c7f8-6bca-44a0-be0a-6fea2c365389",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Verify List Name with 'Done' Exists\", function () {",
											"    pm.expect(response[3].name).to.eql(\"Done\");",
											"});",
											"",
											"const doneListID = response[3].id;",
											"pm.environment.get(doneListID);",
											"pm.environment.set(\"doneListID\", doneListID);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/boards/:id/lists?key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"boards",
										":id",
										"lists"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{boardID}}"
										}
									]
								},
								"description": "API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-id-lists-get\nURL - https://api.trello.com/1/boards/{id}/lists"
							},
							"response": []
						},
						{
							"name": "Part 4a - Move Dynamic Card to List Done",
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&idList={{doneListID}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										},
										{
											"key": "idList",
											"value": "{{doneListID}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{cardID}}"
										}
									]
								},
								"description": "API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-cards-id-put \nURL - https://api.trello.com/1/cards/{id}"
							},
							"response": []
						},
						{
							"name": "Part 5 - Delete Card",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.trello.com/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}",
									"protocol": "https",
									"host": [
										"api",
										"trello",
										"com"
									],
									"path": [
										"1",
										"cards",
										":id"
									],
									"query": [
										{
											"key": "key",
											"value": "{{trelloKey}}"
										},
										{
											"key": "token",
											"value": "{{trelloToken}}"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{cardID}}"
										}
									]
								},
								"description": "API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-cards-id-delete \nURL - https://api.trello.com/1/cards/{id}"
							},
							"response": []
						},
						{
							"name": "Variable Scopes - set up different URL's using env's in Postman",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Variables",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Up to this point have uses key and value pairs from global variables stored (i.e.. trelloKey and trelloToken, etc...)\n\nAlways room for improvement\n\nThis request does nothing\n\nGoal\n1. To not repeat yourself\n2. Write varibale once or to update it automatically\n3. Dont want to same information all over the place\n\n\nVariable Types\nWill only handle Environment and Global\n  -there is a hierachy to this.\n  -if same variable defined in both global and environmental the enviornmental variable will win because the scope is narrower"
					},
					"response": []
				},
				{
					"name": "Global Variables - Create Board - Store ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96535e8e-3dbd-4fc2-b13c-4951ba724b12",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response  = pm.response.json();",
									"",
									"pm.test(\"Verify - Borad Name\", function () {",
									"    pm.expect(response.name).to.eql(\"GlobalVariablesBoard3\");",
									"});",
									"",
									"pm.test(\"Verify - Permission Level\", function () {",
									"    pm.expect(response.prefs.permissionLevel).to.eql(\"private\");",
									"});",
									"",
									"",
									"pm.globals.set(\"BoardID\", response.id);",
									"",
									"",
									"console.log(response);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=GlobalVariablesBoard3&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "GlobalVariablesBoard3"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						},
						"description": "To use variables in request define them and then use {{VariableName}} so they can be used within Request builder\n -Request builder is anything that has to do with Params, Authorization, Headers and Body\n \nSet and Get Global Variables\n     1. accces it -- pm.globals.get(\"variable_key\")\n     2. set it -- pm.globals.set(\"variable_key\",\"variable_value\")\n \n When defined should be added to Global Environment List (eye icon top right)\n \n \n Unset and Clear Global Variables\n     1. remove global variable done need anymore - pm.globals.unset(\"variable_key\")\n         -can be removed after request / response or when no longer need\n     2. clear all global variables - pm.globals.clear();\n     \nAssignment for this request\n1. Create request with new board name\n--We will create a board using trello API, documentation states to use the following URL \n--API Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-post\n--API URL - https://api.trello.com/1/boards/?name={name}\n2. Verify board name \n3. Verify board is private\n4. Save ID of Board as Global Variable --once stored we can use it any other request or collection"
					},
					"response": []
				},
				{
					"name": "Global Variables - Create ToDoList - Pass Board ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d3b3dc5-f1c5-4478-a6d4-680a709b0c3b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response  = pm.response.json();",
									"",
									"pm.test(\"Verify - Borad Name\", function () {",
									"    pm.expect(response.name).to.eql(\"ToDoListGlobalBoardID4\");",
									"});",
									"",
									"pm.test(\"Verify - Board ID\", function () {",
									"    pm.expect(response.idBoard).to.eql(pm.globals.get(\"BoardID\"));",
									"});",
									"",
									"",
									"pm.globals.unset(\"BoardID\");",
									"",
									"console.log(response);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:id/lists?name=ToDoListGlobalBoardID4&token={{trelloToken}}&key={{trelloKey}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":id",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "ToDoListGlobalBoardID4"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{BoardID}}"
								}
							]
						},
						"description": "Pass Global Variable when Creating List within Board\n\nAPI Documentation - https://developer.atlassian.com/cloud/trello/rest/#api-boards-id-lists-post URL to use - https://api.trello.com/1/boards/{id}/lists?name={name} \n\nFor {id} value we are using GlobalValue BoardID from \"Global VAriables - Create Board - Store ID\" and using it within the Request builder and veriying in test scripts\n\nThen we clear global variable pm.globals.unset(\"variable_value\")\n\n\nRULE - when we are dont with data delete or clear it so we dont have to manage it later"
					},
					"response": []
				},
				{
					"name": "Environment Variables - Create and Define",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d3b3dc5-f1c5-4478-a6d4-680a709b0c3b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response  = pm.response.json();",
									"",
									"pm.test(\"Verify - Borad Name\", function () {",
									"    pm.expect(response.name).to.eql(\"ToDoListGlobalBoardID4\");",
									"});",
									"",
									"pm.test(\"Verify - Board ID\", function () {",
									"    pm.expect(response.idBoard).to.eql(pm.globals.get(\"BoardID\"));",
									"});",
									"",
									"",
									"pm.globals.unset(\"BoardID\");",
									"",
									"console.log(response);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:id/lists?name=ToDoListGlobalBoardID4&token={{trelloToken}}&key={{trelloKey}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":id",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "ToDoListGlobalBoardID4"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{BoardID}}"
								}
							]
						},
						"description": "Environment Variables have narrower scope \nUse Case \n -have two different environmental variables, one that can be used in production and one that can be used in staging\n \nSetup\n -select eye icon from top right hand side, select environment variables add name and add values. \n\nTest\n - BEFORe environment setup hover over token or vey value and notice scopt says Global\n - NEXT update environment, select new evnrionment created in Setup and repeat hovering over values, observe they say Environment now\n\n\nTo Sum Up\n -when no environment variable selected Postman will check for Global Variables with that key/value pair, \n -if Environment selected Postnam will search for Environment variables with that key/value pair\n \n Advantages - \n  -Environment Variables - can have multiple environments with same variables (different values) and sames requets, just need to point to environment\n  -Global Variables - can only have one variable with one values, no multiple"
					},
					"response": []
				},
				{
					"name": "Environment Variables - Scripting in Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d3b3dc5-f1c5-4478-a6d4-680a709b0c3b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response  = pm.response.json();",
									"",
									"pm.test(\"Verify - Borad Name\", function () {",
									"    pm.expect(response.name).to.eql(\"ToDoListGlobalBoardID4\");",
									"});",
									"",
									"pm.test(\"Verify - Board ID\", function () {",
									"    pm.expect(response.idBoard).to.eql(pm.globals.get(\"BoardID\"));",
									"});",
									"",
									"",
									"pm.globals.unset(\"BoardID\");",
									"",
									"console.log(response);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/:id/lists?name=ToDoListGlobalBoardID4&token={{trelloToken}}&key={{trelloKey}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								":id",
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "ToDoListGlobalBoardID4"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{BoardID}}"
								}
							]
						},
						"description": "Scripting Environment Variables\n\nset environment variable - pm.environment.set(\"variable_key\", variable_value)\nget environment variable - pm.environment.get(\"myVariable\")\nunset and clear value for environment variable - pm.environment.unset(\"myVariable\")\nclear all environment variables - pm.environment.clear()"
					},
					"response": []
				},
				{
					"name": "Session Variables - Scripting in Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d3b3dc5-f1c5-4478-a6d4-680a709b0c3b",
								"exec": [
									"pm.environment.set(\"myVar\", \"1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "example.",
							"host": [
								"example"
							]
						},
						"description": "Introduced in Postman 6.2,\n\nIf you view Variables you see two values \n\nSession Variables - \n  Initival Values - variables shared within collection when exported (only used for exporting)\n  Current Values - never shared with collection\n\nThe values which are confidential like token and key you could mark as 'YOURKEY' and 'YOURTOKEN' leaving other path and query params within the request builder the same. This way when a collection is exported and shared your secret key and token is not shared and the other user who will use it can pass their own information. Makes secure and safe\n\nNote - initial and current do not have to be the same, they will so by default though. Current Value is the value Postman will use"
					},
					"response": []
				},
				{
					"name": "Collection Varibales - Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d3b3dc5-f1c5-4478-a6d4-680a709b0c3b",
								"exec": [
									"pm.environment.set(\"myVar\", \"1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "example.",
							"host": [
								"example"
							]
						},
						"description": "Same logic as Global, Environment, Session variables\n\nTo go to go to Collection Name->Edit->Variable (these are collection variables)\n\nAll variables depend on where we want to save them and allow access to them"
					},
					"response": []
				},
				{
					"name": "PreRequest Scripts - scripts that run before execution",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "PreRequest Scripts - Pass Environment Variable to Parms",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ca5b043-bf2d-42d4-a1d2-eef225da595d",
								"exec": [
									"pm.environment.set(\"boardName\", \"My new board 234\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						},
						"description": "Making Trello board use Pre-request Script value\n1. Set up Params\n2. Navigate to Pre-request script\n3. Set environmental variable (can set global but let use environmental, NEW method learned)\n4. Perform request w prerequest script\n5. Observe environmental variable set\n6. Perform environmental variable substituion within Params {{boardName}}\n7. Perform Request\n8. Observe new value being used, STILL NOT DYNAMIC"
					},
					"response": []
				},
				{
					"name": "PreRequest Scripts - Dynamic Board Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ca5b043-bf2d-42d4-a1d2-eef225da595d",
								"exec": [
									"pm.environment.set(\"boardName\", \"My new board \" + parseInt(Math.random() * 10000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						},
						"description": "Making Trello board 'name' dynamic in test script \n1. Set up Params\n2. Navigate to Pre-request script\n3. Set environmental variable to random number\n4. Use Math Randdom to Create Random Board Name number \n   pm.environment.set(\"boardName\", parseInt(Math.random() * 10000));\n   -parse.Int - since using number\n   -Math.random() - generates random number between 1 and 10 so make bigger by multiplying by 10K\n5. Can either do \n   a - Within Params update 'name' value with text before environmental variable to make dynamic\n       --i.e... NewBoard {{boardName}}\n   b - update pre request script and concatenate random int with board name\n\nOption B is better"
					},
					"response": []
				},
				{
					"name": "PreRequest Scripts - Creating Const Pre Request Script",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ca5b043-bf2d-42d4-a1d2-eef225da595d",
								"exec": [
									"const boardName = \"My new board \" + parseInt(Math.random() * 10000);",
									"pm.environment.set(\"boardName\", boardName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						},
						"description": "For debugging purposes we want to troubleshoot easier so we take the below and seperate out into different pieces\n\nBefore\npm.environment.set(\"boardName\", \"My new board \" + parseInt(Math.random() * 10000));\n\nAfter\nconst boardName = \"My new board \" + parseInt(Math.random() * 10000);\npm.environment.set(\"boardName\", boardName);"
					},
					"response": []
				},
				{
					"name": "PreRequest Scripts - Creating Function Pre Request Script",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ca5b043-bf2d-42d4-a1d2-eef225da595d",
								"exec": [
									"const boardName = getRandomBoardName(); ",
									"pm.environment.set(\"boardName\", boardName);",
									"",
									"function getRandomBoardName () {",
									"    return \"My new board \" + parseInt(Math.random() * 10000);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						},
						"description": "For debugging purposes we want to troubleshoot easier so we take the below and seperate out into different pieces\n\nBefore\npm.environment.set(\"boardName\", \"My new board \" + parseInt(Math.random() * 10000));\n\nAfter\nconst boardName = \"My new board \" + parseInt(Math.random() * 10000);\npm.environment.set(\"boardName\", boardName);\n\nFunction overhaul makes pre request script even cleaner\n\nconst boardName = getRandomBoardName(); \npm.environment.set(\"boardName\", boardName);\n\nfunction getRandomBoardName () {\n    return \"My new board \" + parseInt(Math.random() * 10000);\n}"
					},
					"response": []
				},
				{
					"name": "PreRequest Scripts - Set and Get Dynamic Board Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ca5b043-bf2d-42d4-a1d2-eef225da595d",
								"exec": [
									"pm.environment.set(\"boardName\", getRandomBoardName());",
									"",
									"function getRandomBoardName () {",
									"    const boardName =  \"My new board \" + parseInt(Math.random() * 10000);",
									"    console.log (boardName);",
									"    return boardName;",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "907f302a-1cf1-4d7b-bc0c-cbca0423e62e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response  = pm.response.json();",
									"",
									"pm.test(\"Verify - Dynamic Borad Name\", function () {",
									"    pm.expect(response.name).to.eql(pm.environment.get(\"boardName\"));",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{boardName}}"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						},
						"description": "Setting and Getting Dynamic Board Name. Below we have a pre request scrip to seat the dynamic board name, now we need to get the dynamic board name\n\n\nFunction overhaul makes pre request script even cleaner\n\nconst boardName = getRandomBoardName(); \npm.environment.set(\"boardName\", boardName);\n\nfunction getRandomBoardName () {\n    return \"My new board \" + parseInt(Math.random() * 10000);\n}\n\nTRy Debugging\npm.environment.set(\"boardName\", boardName);\nfunction getRandomBoardName () {\n    const boardName =  \"My new board \" + parseInt(Math.random() * 10000);\n    console.log (boardName);\n    return boardName;\n}"
					},
					"response": []
				},
				{
					"name": "Variable Scopes - Understanding Variable Scopes + Types",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "When it makes sense to use variable type\n\nhttps://medium.com/@vdespa/demystifying-postman-variables-how-and-when-to-use-different-variable-scopes-66ad8dc11200\n\nGlobal, Collection, Envrionment,  Data and Local Variables\n -if two variables are named the same the one closes to request in relation to hierarchy will be chose, (ie... local closest and global furthest)\n \n \n Gloabl Variables - ideal for quick response and protyping (setting up test intitially and seeing if it works)\n     -avoid using as much as possible\n     -only use as last result\n     -clear after being used\n      -USE scoped getter to see which variables are being used in the space pm.variables.get()\n      \n Environental Variables - ideal when working with multiple servers (staging vs prod)\n     -good alternative to global variables\n     -allows storing of environment information easily (URL's, authentification information)\n     -updating and passing data to other requestis (Section 4 assignment 3 for example)\n     -clear after being used\n     -avoid naming same as global varibles (mixing)\n     -USE scoped getter to see which variables are being used in the space pm.variables.get()\n     \n Collection Varaibles - ideal for storing constants, enums (values cant be updated)\n    -cant be updated with scripts\n    -good use for credentials which do not change, URL's, etc....\n    -eliminates duplicate variables\n    -avoid and only use if necessary, environmental variables better\n    -USE scoped getter to see which variables are being used in the space pm.variables.get()\n    \n Data Variables - ideal for working with multiple data sets\n    -exist only during iteration of run\n    -can only be set from CSV or JSON File"
					},
					"response": []
				},
				{
					"name": "Variable Scopes - Setup different URL's using env's in Postman",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38e75cc2-4035-4650-b010-0ca2d63a3583",
								"exec": [
									"console.log(pm.environment.get('url'));",
									"console.log(pm.environment.get('environment'));",
									"",
									"if (pm.environment.get('environment') === 'production'){",
									"    pm.environment.set(\"Pass\", \"ifTest\");",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "For setup added below environments\n\nhttps://readthedocs.org/projects/postman-quick-reference-guide/downloads/pdf/latest/\n\nlocal - example-local.com\nQA - example-qa.com\nProduction - example-production.com\n\nOnce an environment is set it is avaivable to all collections and all requets associated within.\n  -if using continuous integration then dont forget to export each environment\n    -user a updates, user b needs newest collection, so user a exports and then user b uploads newest collection\n    \nIf need to access environmental variables in scripts just use PM API (pm.environment.get('url'))\n\nStore Environment Variables for Information - If you need to know which environment you are currently in create another variable within the environment which stores this (ie.. environment/local for example.\n\nCan write conditional tests to execute / create somethinf around IF statement for example \n\nconsole.log(pm.environment.get('url'));\nconsole.log(pm.environment.get('environment'));\n\nif (pm.environment.get('environment') == 'production'){\n    pm.environment.set(\"Pass\", \"ifTest\");\n}\n\n\n\nYOU CAN USE as many environment variables to 'Store Environment Variables for Information' if lets say things within your environment constantly change, like parts within the URL for example\n   -add to conditional if statement as enedd"
					},
					"response": []
				},
				{
					"name": "Debugging Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07a13d72-1b60-4ee2-bc82-817388b0071c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response  = pm.response.json();",
									"",
									"console.log(response);",
									"console.log(response.prefs);",
									"console.log(response.prefs.hideVotes)",
									"",
									"if (response.prefs.hideVotes === false){",
									"    console.log(\"boolean comparison pass\");",
									"}",
									"else{",
									"    console.log(\"losing\");",
									"}",
									"",
									"console.log(response.prefs.voting);",
									"",
									"if (response.prefs.voting === 'disabled')",
									"{",
									"    console.log(\"string comparison pass\")",
									"}",
									"",
									"pm.test(\"Verify - Borad Name\", function () {",
									"    pm.expect(response.name).to.eql(\"GlobalVariablesBoard3\");",
									"});",
									"",
									"pm.test(\"Verify - Permission Level\", function () {",
									"    pm.expect(response.prefs.permissionLevel).to.eql(\"private\");",
									"});",
									"",
									"",
									"pm.globals.set(\"BoardID\", response.id);",
									"",
									"",
									"console.log(response);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.trello.com/1/boards/?name=GlobalVariablesBoard3&key={{trelloKey}}&token={{trelloToken}}",
							"protocol": "https",
							"host": [
								"api",
								"trello",
								"com"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "GlobalVariablesBoard3"
								},
								{
									"key": "key",
									"value": "{{trelloKey}}"
								},
								{
									"key": "token",
									"value": "{{trelloToken}}"
								}
							]
						},
						"description": "Strategy for Debugging Tests and Request\n\n-Use Postman Console\n -console.log you can check any variable, output of function, etc and see what your test is outputting.\n -different levels of output depends on what you want\n \n Example:\n  -response body gives you three levels, \n    -response\n      -prefs\n      -etccc.\n      \n console.log(response);  --gives you all levels\n console.log(response.prefs);  --gives you just prefs level\n console.log(response.prefs.hideVotes);  --gives you value of hideVotes value\n  \n if there is a value which does not exist then a null will be returned in response, you may use this for a conditional statement as in some tests some x values should not be seen so if value null return true, etc.."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Section 5 - Building and Testing API Workflow",
			"item": [
				{
					"name": "Assignment 4  - Creating Simple Github Workflow API",
					"item": [
						{
							"name": "Github - Create Repository",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c085c5aa-1f8d-49a2-997e-fd666ff6d011",
										"exec": [
											"pm.environment.set(\"GitHubRepoName\", getRandomGitHubRepoName());",
											"",
											"function getRandomGitHubRepoName () {",
											"    const RepoName =  \"My-new-repo\" + parseInt(Math.random() * 10000);",
											"    console.log (RepoName);",
											"    return RepoName;",
											"}",
											"",
											"",
											"pm.environment.set(\"GitHubRepoDescription\", getRandomGitHubRepoDescription());",
											"",
											"function getRandomGitHubRepoDescription () {",
											"    const RepoDescription =  \"My new repo description \" + parseInt(Math.random() * 10000);",
											"    console.log (RepoDescription);",
											"    return RepoDescription;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "211a31b1-1c76-4973-8ec1-1e18e636098e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"",
											"console.log(response.owner.login);",
											"pm.environment.set(\"repoOwner\", response.owner.login);",
											"",
											"console.log(response.name);",
											"pm.environment.set(\"repoName\", response.name);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{GitHubRepoName}}\",\n  \"description\": \"{{GitHubRepoDescription}}\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "Assignmet 4 - Step 1\n\nAdd a new request to the collection that creates a new Github repository with the following properties:\n- name: Test repository (random string)\n- description: This is a test repository created by Postman\n\nAdd one test that checks the status code (expected 201).\n- Note: by visiting your profile, you can notice that the repository is now visible.\n- Hint: in order to create the repository, you need to send JSON in your request body.\n\nAPI Documentation - https://developer.github.com/v3/repos/#create-a-repository-for-the-authenticated-user\n\nURL - POST /user/repos"
							},
							"response": []
						},
						{
							"name": "Github - Get Repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc08010c-c7b0-4b22-838a-089e09ef04bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"",
											"",
											"console.log(response.name)",
											"pm.test(\"Verify GitHub Repo Name\", function () {",
											"    pm.expect(response.name).to.eql(pm.environment.get(\"GitHubRepoName\"));",
											"});",
											"",
											"console.log(response.description)",
											"pm.test(\"Verify GitHub Description\", function () {",
											"    pm.expect(response.description).to.eql(pm.environment.get(\"GitHubRepoDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								},
								"description": "Assignmet 4 - Step 2\n- Add a new request to the collection that retrieves (with GET) the newly created Github repository.\n- Add one test that checks the status code (expected 200).\n- This is an additional test step that ensures that the repository was indeed created.\n\nAPI Documentation - https://developer.github.com/v3/repos/#get-a-repository\n\nURL - GET /repos/:owner/:repo"
							},
							"response": []
						},
						{
							"name": "Github - Create Issue Request Repo",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "838ae5c3-2cd4-41ff-a299-98b8f95e8a05",
										"exec": [
											"pm.environment.set(\"ReportIssueRandomTitle\", getRandomGReportIssueTitle());",
											"",
											"function getRandomGReportIssueTitle () {",
											"    const ReportIsssueName =  \"Issue Number \" + parseInt(Math.random() * 10000);",
											"    console.log (ReportIsssueName);",
											"    return ReportIsssueName;",
											"}",
											"",
											"",
											"pm.environment.set(\"ReportIssueRandomBody\", getRandomReportIssueDescription());",
											"",
											"function getRandomReportIssueDescription () {",
											"    const ReportIssueDescription =  \"Issue Description \" + parseInt(Math.random() * 10000);",
											"    console.log (ReportIssueDescription);",
											"    return ReportIssueDescription;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3059fb04-4a07-4645-87c2-74ea94dca433",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"console.log(response.number);",
											"pm.environment.set(\"IssueNumber\", response.number);",
											"",
											"console.log(response.title);",
											"pm.environment.set(\"IssueTitle\", response.title);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{ReportIssueRandomTitle}}\",\n  \"body\": \"{{ReportIssueRandomBody}}\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								},
								"description": "Assignment 4 - Step 3\n\nAdd a new request to the collection that creates a few issue inside the repository with the following content:\n- title: Found a bug\n- body: This issue has been automatically created by Postman.\n- Add one test that checks the status code (expected 201).\n\nAPI Documentation - https://developer.github.com/v3/issues/#create-an-issue\n\nURL - POST /repos/:owner/:repo/issues"
							},
							"response": []
						},
						{
							"name": "Github - Get Newly Created Issue",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0bb53b8-de6e-4211-9a08-5a334a73ac01",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"",
											"console.log(response.number);",
											"pm.test(\"Verify Issue Number\", function () {",
											"    pm.expect(response.number).to.eql(pm.environment.get(\"IssueNumber\"));",
											"});",
											"",
											"console.log(response.title);",
											"pm.test(\"Verify Issue Title\", function () {",
											"    pm.expect(response.title).to.eql(pm.environment.get(\"IssueTitle\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues/:issue_number",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues",
										":issue_number"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										},
										{
											"key": "issue_number",
											"value": "{{IssueNumber}}"
										}
									]
								},
								"description": "Assignment 4 - Step 4\n- Add a new request to the collection that retrieves (with GET) the newly created Github repository issue.\n- Add one test that checks the status code (expected 200).\n- Add one test that checks the issue title (expected \"Found a bug\").\n- This is an additional test step that ensures that the issues was created.\n\n\n\n\nAPI Documentation - https://developer.github.com/v3/issues/#get-an-issue\n\nURL - GET /repos/:owner/:repo/issues/:issue_number"
							},
							"response": []
						},
						{
							"name": "Github - Delete A Repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56b09e83-f789-4aae-8935-595e8db3a5c5",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								},
								"description": "Assinment 5 -= Step 5\n- Time to clean-up, otherwise your account will be filled with repositories which you don't need\n- Make sure you delete the repository that you have created.\n- Add one test that checks the status code (expected 204).\n\nAPI Documentation - https://developer.github.com/v3/repos/#delete-a-repository\n\nURL - DELETE /repos/:owner/:repo"
							},
							"response": []
						},
						{
							"name": "Github - Get Deleted Repo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54521e76-3807-4975-8e78-27bf12de2d08",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.environment.clear();",
											"",
											"const response = pm.response.json();",
											"",
											"if (response.message === \"Not Found\")",
											"{",
											"    console.log(\"repo not found\");",
											"}",
											"",
											"pm.test(\"Repo Not Found Check\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(response.message).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								},
								"description": "Assignment 6 - Step 6\n- Try again to fetch (with GET) the repository that you have just deleted (similar to Step 2).\n- Add one test that checks the status code (expected 404 Not found).\n- Clear any variables that you have used in this collection.\n\nAPI Documentation - https://developer.github.com/v3/repos/#get-a-repository\n\nURL - GET /repos/:owner/:repo"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assignment 5 - GitHub - Twilio - Setting up 2FA",
					"item": [
						{
							"name": "Twilio Request to get 2FA From Github",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.twilio.com/2010-04-01/Accounts/:AccountSid/Messages.json?",
									"protocol": "https",
									"host": [
										"api",
										"twilio",
										"com"
									],
									"path": [
										"2010-04-01",
										"Accounts",
										":AccountSid",
										"Messages.json"
									],
									"query": [
										{
											"key": "authToken",
											"value": "L40J0rb6h1p4gF6f15B0J25NzvxHL6Z9",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "AccountSid",
											"value": "{{twilioAccountSid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Github - send 2FA Authorization Code",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.github.com/authorizations",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"authorizations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Twilio - get Contents of Message Body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3b92806-e91d-45c8-a447-7544c9b82feb",
										"exec": [
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"console.log(response.messages[0].body.length);",
											"console.log(response.messages[0].body);",
											"",
											"var authCode = \"\";",
											"var messageBody = response.messages[0].body;",
											"var messageBodyLength = response.messages[0].body.length;",
											"",
											"console.log(authCode.concat(response.messages[0].body[0], response.messages[0].body[1], response.messages[0].body[2], response.messages[0].body[3], response.messages[0].body[4],response.messages[0].body[5]));",
											"",
											"var authenticationCode = messageBody.slice(0,6);",
											"",
											"console.log(authenticationCode);",
											"",
											"pm.environment.set(\"authenticationCode\", authenticationCode);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{twilioToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{twilloKey}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://api.twilio.com/2010-04-01/Accounts/:AccountSid/Messages.json?",
									"protocol": "https",
									"host": [
										"api",
										"twilio",
										"com"
									],
									"path": [
										"2010-04-01",
										"Accounts",
										":AccountSid",
										"Messages.json"
									],
									"query": [
										{
											"key": "authToken",
											"value": "L40J0rb6h1p4gF6f15B0J25NzvxHL6Z9",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "AccountSid",
											"value": "{{twilioAccountSid}}"
										}
									]
								},
								"description": "To sum up how to get auth code from body we can do tow things. Explained this in three sections below. REMEMBER that auth codes are only good for not that long sometimes if the length of your collection is long you may need to retry to get new auth everyonce in a while (Troubelshooting step 2 may be good to do)\n\n--Using multiple variables\n1. var messageBody = response.messages[0].body;\n2. var authenticationCode = messageBody.slice(0,6);\n3. console.log(authenticationCode);\n\n--using one variable\n1. var authCode = response.messages[0].body.substring(0,6)\nconsole.log(authCode);\n\n\n--Troubleshooting\nScenario - its not guaranteed we always get a new authenticade code so there are some things we can do\n1. Set delay as response may take sometime\n2. Do retry and send multiple requests to fix the problem\n3. Compare previous to current value and if different then use auth code or retry request to get new one"
							},
							"response": []
						},
						{
							"name": "Github - Create Repository - using 2FA Automation",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc510b6b-1f47-4b80-bc30-b58b7f6f9d55",
										"exec": [
											"pm.environment.set(\"GitHubRepoName\", getRandomGitHubRepoName());",
											"",
											"function getRandomGitHubRepoName () {",
											"    const RepoName =  \"My-new-repo\" + parseInt(Math.random() * 10000);",
											"    console.log (RepoName);",
											"    return RepoName;",
											"}",
											"",
											"",
											"pm.environment.set(\"GitHubRepoDescription\", getRandomGitHubRepoDescription());",
											"",
											"function getRandomGitHubRepoDescription () {",
											"    const RepoDescription =  \"My new repo description \" + parseInt(Math.random() * 10000);",
											"    console.log (RepoDescription);",
											"    return RepoDescription;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c243f658-906f-4c2b-857f-ae870007caff",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"",
											"console.log(response.owner.login);",
											"pm.environment.set(\"repoOwner\", response.owner.login);",
											"",
											"console.log(response.name);",
											"pm.environment.set(\"repoName\", response.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-GitHub-OTP",
										"value": "{{authenticationCode}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{GitHubRepoName}}\",\n  \"description\": \"{{GitHubRepoDescription}}\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Github - Get Repository created using 2FA",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-GitHub-OTP",
										"value": "{{authenticationCode}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Github - Create Issue - using 2FA auth Code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab26a12d-3500-4266-8c7b-30f6a4e7791d",
										"exec": [
											"pm.environment.set(\"ReportIssueRandomTitle\", getRandomGReportIssueTitle());",
											"",
											"function getRandomGReportIssueTitle () {",
											"    const ReportIsssueName =  \"Issue Number \" + parseInt(Math.random() * 10000);",
											"    console.log (ReportIsssueName);",
											"    return ReportIsssueName;",
											"}",
											"",
											"",
											"pm.environment.set(\"ReportIssueRandomBody\", getRandomReportIssueDescription());",
											"",
											"function getRandomReportIssueDescription () {",
											"    const ReportIssueDescription =  \"Issue Description \" + parseInt(Math.random() * 10000);",
											"    console.log (ReportIssueDescription);",
											"    return ReportIssueDescription;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12959168-1b88-47c3-931a-59897f74519a",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"issue_number\", response.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-GitHub-OTP",
										"value": "{{authenticationCode}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{ReportIssueRandomTitle}}\",\n  \"body\": \"{{ReportIssueRandomBody}}\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Github - Get Newly Created Issue - using 2FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0bb53b8-de6e-4211-9a08-5a334a73ac01",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"",
											"console.log(response.number);",
											"pm.test(\"Verify Issue Number\", function () {",
											"    pm.expect(response.number).to.eql(pm.environment.get(\"IssueNumber\"));",
											"});",
											"",
											"console.log(response.title);",
											"pm.test(\"Verify Issue Title\", function () {",
											"    pm.expect(response.title).to.eql(pm.environment.get(\"IssueTitle\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues/:issue_number",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues",
										":issue_number"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										},
										{
											"key": "issue_number",
											"value": "{{IssueNumber}}"
										}
									]
								},
								"description": "Assignment 4 - Step 4\n- Add a new request to the collection that retrieves (with GET) the newly created Github repository issue.\n- Add one test that checks the status code (expected 200).\n- Add one test that checks the issue title (expected \"Found a bug\").\n- This is an additional test step that ensures that the issues was created.\n\n\n\n\nAPI Documentation - https://developer.github.com/v3/issues/#get-an-issue\n\nURL - GET /repos/:owner/:repo/issues/:issue_number"
							},
							"response": []
						},
						{
							"name": "Github - Delete A Repository - using 2FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56b09e83-f789-4aae-8935-595e8db3a5c5",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "X-GitHub-OTP",
										"value": "{{authenticationCode}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								},
								"description": "Assinment 5 -= Step 5\n- Time to clean-up, otherwise your account will be filled with repositories which you don't need\n- Make sure you delete the repository that you have created.\n- Add one test that checks the status code (expected 204).\n\nAPI Documentation - https://developer.github.com/v3/repos/#delete-a-repository\n\nURL - DELETE /repos/:owner/:repo"
							},
							"response": []
						},
						{
							"name": "Github - Get Deleted Repo - using 2FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54521e76-3807-4975-8e78-27bf12de2d08",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.environment.clear();",
											"",
											"const response = pm.response.json();",
											"",
											"if (response.message === \"Not Found\")",
											"{",
											"    console.log(\"repo not found\");",
											"}",
											"",
											"pm.test(\"Repo Not Found Check\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(response.message).to.eql(\"Not Found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								},
								"description": "Assignment 6 - Step 6\n- Try again to fetch (with GET) the repository that you have just deleted (similar to Step 2).\n- Add one test that checks the status code (expected 404 Not found).\n- Clear any variables that you have used in this collection.\n\nAPI Documentation - https://developer.github.com/v3/repos/#get-a-repository\n\nURL - GET /repos/:owner/:repo"
							},
							"response": []
						}
					],
					"description": "Study the Twilio API documentation / API explorer and figure a way to read the SMS code that was send by Github, but this time from Postman.\n\nURL - https://github.com/marketplace/actions/twilio-sms",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assignment 6 - Adding Automatic Comment for New Issue Created - NO 2FA",
					"item": [
						{
							"name": "Create Repo ",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dc510b6b-1f47-4b80-bc30-b58b7f6f9d55",
										"exec": [
											"pm.environment.set(\"GitHubRepoName\", getRandomGitHubRepoName());",
											"",
											"function getRandomGitHubRepoName () {",
											"    const RepoName =  \"My-new-repo\" + parseInt(Math.random() * 10000);",
											"    console.log (RepoName);",
											"    return RepoName;",
											"}",
											"",
											"",
											"pm.environment.set(\"GitHubRepoDescription\", getRandomGitHubRepoDescription());",
											"",
											"function getRandomGitHubRepoDescription () {",
											"    const RepoDescription =  \"My new repo description \" + parseInt(Math.random() * 10000);",
											"    console.log (RepoDescription);",
											"    return RepoDescription;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c243f658-906f-4c2b-857f-ae870007caff",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"const response = pm.response.json();",
											"",
											"console.log(response.owner.login);",
											"pm.environment.set(\"repoOwner\", response.owner.login);",
											"",
											"console.log(response.name);",
											"pm.environment.set(\"repoName\", response.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-GitHub-OTP",
										"value": "{{authenticationCode}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{GitHubRepoName}}\",\n  \"description\": \"{{GitHubRepoDescription}}\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Issue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ab26a12d-3500-4266-8c7b-30f6a4e7791d",
										"exec": [
											"pm.environment.set(\"ReportIssueRandomTitle\", getRandomGReportIssueTitle());",
											"",
											"function getRandomGReportIssueTitle () {",
											"    const ReportIsssueName =  \"Issue Number \" + parseInt(Math.random() * 10000);",
											"    console.log (ReportIsssueName);",
											"    return ReportIsssueName;",
											"}",
											"",
											"",
											"pm.environment.set(\"ReportIssueRandomBody\", getRandomReportIssueDescription());",
											"",
											"function getRandomReportIssueDescription () {",
											"    const ReportIssueDescription =  \"Issue Description \" + parseInt(Math.random() * 10000);",
											"    console.log (ReportIssueDescription);",
											"    return ReportIssueDescription;",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12959168-1b88-47c3-931a-59897f74519a",
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.environment.set(\"issue_number\", response.number);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-GitHub-OTP",
										"value": "{{authenticationCode}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"{{ReportIssueRandomTitle}}\",\n  \"body\": \"{{ReportIssueRandomBody}}\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Comemnt List for Issue - obtain list of comments INITIAL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b14279a2-515b-4284-a3dd-4ba90a5fd2b8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response  = pm.response.json();",
											"console.log(response.length);",
											"",
											"if (response.length === 0)",
											"{",
											"    console.log(\"no comments for issue\");",
											"    pm.environment.set(\"bcomment_add\", \"true\");",
											"}",
											"else",
											"{",
											"    console.log(\"comments for issue\")",
											"    pm.environment.set(\"bcomment_add\", \"false\");",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues/:issue_number/comments",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues",
										":issue_number",
										"comments"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										},
										{
											"key": "issue_number",
											"value": "{{issue_number}}"
										}
									]
								},
								"description": "API documentation - https://developer.github.com/v3/issues/comments/#list-issue-comments\n\nURL - GET /repos/:owner/:repo/issues/:issue_number/comments\n\nAssigment\n- Every time a new issue is posted in a specific repository, add an automatic comment: (COMPLETED IN THIS REQUEST)\n- Thank you for reporting this issue. I will look into it as soon as possible.\n\nSOLUTION IMPLEMENTED - obtain list of comments and if empty list (length of 0 returned in array) then set bool value to true"
							},
							"response": []
						},
						{
							"name": "Create Automatic Comment for Issue-INITIAL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b3ead28-5aaf-48af-bb6d-d54cfcf81dbb",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2d16855-a952-434a-ae50-16fda02e4806",
										"exec": [
											"console.log(pm.environment.get(\"bcomment_add\"));",
											"",
											"if (pm.environment.get(\"bcomment_add\") === \"true\")",
											"{",
											"    console.log(\"no comment exists, calling POST to create automatic comment\")",
											"   postman.setNextRequest('Create Automatic Comment for Issue-INITIAL');",
											"}",
											"else",
											"{",
											"    console.log(\"comment already entered\");",
											"    postman.setNextrequest('null');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GitHub-OTP",
										"type": "text",
										"value": "{{authenticationCode}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"body\" : \"Thank you for reporting this issue. I will look into it as soon as possible.\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues/:issue_number/comments",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues",
										":issue_number",
										"comments"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										},
										{
											"key": "issue_number",
											"value": "{{issue_number}}"
										}
									]
								},
								"description": "API - https://developer.github.com/v3/issues/comments/#create-an-issue-comment\n\nURL - POST /repos/:owner/:repo/issues/:issue_number/comment\n\nAssigment\n- Every time a new issue is posted in a specific repository, add an automatic comment: \n- Thank you for reporting this issue. I will look into it as soon as possible. (COMPLETED IN THIS REQUEST)\n\nSOLUTION IMPLEMENTED - pass boolean from previous request and run in prequest script. If true run this request, if false, fail (in reality we would just run to next request in the list of collection)"
							},
							"response": []
						},
						{
							"name": "Get Comemnt List for Issue - obtain list of comments SECOND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b14279a2-515b-4284-a3dd-4ba90a5fd2b8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response  = pm.response.json();",
											"console.log(response.length);",
											"",
											"if (response.length === 0)",
											"{",
											"    console.log(\"no comments for issue\");",
											"    pm.environment.set(\"bcomment_add\", \"true\");",
											"}",
											"else",
											"{",
											"    console.log(\"comments for issue\")",
											"    pm.environment.set(\"bcomment_add\", \"false\");",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues/:issue_number/comments",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues",
										":issue_number",
										"comments"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										},
										{
											"key": "issue_number",
											"value": "{{issue_number}}"
										}
									]
								},
								"description": "Obtain list of comments again (should be more than one now). By rerunning request the boolean for updating if there are comments or not should update to false"
							},
							"response": []
						},
						{
							"name": "Create Automatic Comment for Issue- SECOND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7b3ead28-5aaf-48af-bb6d-d54cfcf81dbb",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2d16855-a952-434a-ae50-16fda02e4806",
										"exec": [
											"console.log(pm.environment.get(\"bcomment_add\"));",
											"",
											"if (pm.environment.get(\"bcomment_add\") === \"true\")",
											"{",
											"    console.log(\"no comment exists, calling POST to create automatic comment\")",
											"   postman.setNextRequest('Create Automatic Comment for Issue- SECOND');",
											"}",
											"else",
											"{",
											"    console.log(\"comment already entered\");",
											"    postman.setNextrequest('null');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-GitHub-OTP",
										"type": "text",
										"value": "{{authenticationCode}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"body\" : \"Thank you for reporting this issue. I will look into it as soon as possible.\"\n}"
								},
								"url": {
									"raw": "https://api.github.com/repos/:owner/:repo/issues/:issue_number/comments",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"repos",
										":owner",
										":repo",
										"issues",
										":issue_number",
										"comments"
									],
									"variable": [
										{
											"key": "owner",
											"value": "{{repoOwner}}"
										},
										{
											"key": "repo",
											"value": "{{repoName}}"
										},
										{
											"key": "issue_number",
											"value": "{{issue_number}}"
										}
									]
								},
								"description": "Since"
							},
							"response": []
						}
					],
					"description": "1. Every time a new issue is posted in a specific repository, add an automatic comment:\n\nThank you for reporting this issue. I will look into it as soon as possible.\n\n2. This collection should not contain any manual steps and should run using the Collection Runner.\n\n3. Make sure an issue only has one automatic comment. To track this you could use labels or check for existing comments before adding the automatic comment.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a11409df-45a4-4ecd-94c1-4c2e239bfd80",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95281160-6b77-49a3-a489-12049c53d210",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GitHub - get repo for authenticated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65776d25-ed83-455a-935e-4268b513948a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "C@rdionet81",
									"type": "string"
								},
								{
									"key": "username",
									"value": "joshuacacho",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						},
						"description": "URL - https://developer.github.com/v3/repos/#list-repositories-for-the-authenticated-user\nAll URLs returned in JSON and must begin with https://api.github.com\n\nInformation Given - GET /user/repos\n\nIf run https://api.github.com/user/repos a generic message will be retuned indicating github is a protected endpoint in which we must pass valid credentials / other way to know who we are\n\nSolution (can use others, just depends on what api endpoint options are vailable for user to use) \n -Authorization Tab->Basic Auth (for type)->enter github user credentials"
					},
					"response": []
				},
				{
					"name": "info - Two Factor Authentification",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "2FA - Additional layer af security usually taken in the form of a one time password (otp)\n\nTwo ways to do with github\n1. SMS Message\n2. TOTP (time based one time password) - based (user needs to scan QR Code like Google Auhtenticator) then during log in process code will be seen within application"
					},
					"response": []
				},
				{
					"name": "Gethub - Setup Two Factor Authentification (2FA)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "To setup\n1. Log into github\n2. From your profile select Settings\n3. Select Account Security\n4. Select Enable Two Factor Authentification\n5. For ease we will use SMS Method, [Set up using SMS]\n6. List of Recovery Codes returned (from this copy somewhere safe)\n7. Setup using your phone number\n\nVerify two factor response has been enabled\n\nNote - if you logout and login you will have to redo step 7"
					},
					"response": []
				},
				{
					"name": "Postman - Setup for 2FA",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{UserName}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "X-GitHub-OTP",
								"value": "",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": ""
						},
						"description": "Attempting to run request which previously worked (will reue GitHub - get report for authenticated user as example) will now fail because of two factor authentification, observe 401 is returned\n\nAPI Documentation (as retunred in error response) - https://developer.github.com/v3/auth#working-with-two-factor-authentication\n\nImportant Part\nUsing the OAuth Authorizations API with two-factor authentication\nWhen you make calls to the OAuth Authorizations API, Basic Authentication requires that you use a one-time password (OTP) and your username and password instead of tokens. When you attempt to authenticate with the OAuth Authorizations API, the server will respond with a 401 Unauthorized and one of these headers to let you know that you need a two-factor authentication code:\n\nX-GitHub-OTP: required; SMS or X-GitHub-OTP: required; app.\n\nThis header tells you how your account receives its two-factor authentication codes. Depending how you set up your account, you will either receive your OTP codes via SMS or you will use an application like Google Authenticator or 1Password. For more information, see \"Configuring two-factor authentication.\" Pass the OTP in the header:"
					},
					"response": []
				},
				{
					"name": "Postman - Setiup AUTHORIZATION for 2FA",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{GitHubPassword}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{GitHubUserName}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://api.github.com/authorizations",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"authorizations"
							]
						},
						"description": "This is a continuation form Postman - Setup for 2FA\n\n1. When using Basic Auth with 2FA we need get a new OAuth Authorization code to be able to run requests\n\nAPI Documentation - https://developer.github.com/v3/oauth_authorizations/#create-a-new-authorization\n\nURL - POST /authorizations\n\n\nIMPORTANT - you will get an error stating you must specify 2FA and that is OKAY, this just generates the 2FA needed for your other request"
					},
					"response": []
				},
				{
					"name": "Postman - 2FA running Github - git report for authentiucated user",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{UserName}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-GitHub-OTP",
								"value": "114280",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Postman - 2FA running Github - Automate 2FA with Variable",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{UserName}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{Password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-GitHub-OTP",
								"type": "text",
								"value": "{{otpCode}}"
							}
						],
						"url": {
							"raw": "https://api.github.com/user/repos",
							"protocol": "https",
							"host": [
								"api",
								"github",
								"com"
							],
							"path": [
								"user",
								"repos"
							]
						},
						"description": "Steps involved to automate\n1. Trigger OTP Code\n2. Read OTP Code from Cell Phone + Pass it (THIS IS WHAT WE NEED TO SOLVE) -- how to read code in Postman? \n   --WE NEED somethging that allows us to read SMS message which github has sent us\n   --Hint, Http is all postman can use to get and receive data\n        --Using API's is how we will do it! Need to find API that interacts with github\n3. Create Repo\n4. Create Issue\n5. i.e... run your collection assuming otpCode is passed across the board\n\n\nSolution - need to investigate if there an API which allows us to read SMS from github\n--doing a little research TWILIO will work\n\nGithub supported SMS list\n   --https://docs.github.com/en/github/authenticating-to-github/countries-where-sms-authentication-is-supported\n\n1. Create Free Twilio Account\n2. Get around 20 dollars with free credit\n3. From within Twilio you can get your Trial Number\n   --should get confirmaiton message like Your new Phone Number is +12029525961\nFor help building your Twilio application, check out the resources on the getting started page.\nOnce you've built your application, you can configure this phone number to send and receive calls and messages. \n\n4. Getting phone number from Twilio\n5. Log into github and disable current 2FA and replace with Twilio\n6. From within Twilio go to ... menu->Phone Numbers->Click Phone Number set up->Message Log->Incoming\n7. Should see new message \n8. Note down number seen in body of message\n9. Finish setting up 2FA in Github\n10. Once enabled attemt to incorporate Twilio API within GitHub request automating process\n11. Perform Assignment 5 BEFORE LOOKING AT ANSWER"
					},
					"response": []
				}
			],
			"description": "Using Github and Twilio for this\n\nCreate repo, post issue with content, comment on issue and introduce two factor authentification",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "abf361ab-4119-4c34-b172-0820bcf672c5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1cbeb0bd-5e67-4fa7-9594-654c9840d04c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Section 6 - Advanced Assertions",
			"item": [
				{
					"name": "Assertions Bascis",
					"item": [
						{
							"name": "Postman Assertion Basics - Explanation",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								},
								"description": "Assertion Checks basically follow the below\n\n1) Parse the Response body - grab javascript body you can work with the below formats and their postman conversion\n\n- json - pm.response.json\n- xml - to convert to json - xml2.json(responseBody)\n- html - more complicated to extract information - cheerio(pm.response.text()) -- cheerio is built in library\n- plain text - pm.response.text()\n- csv - if comma seperated csv can use - csv-parse/lib.sync\n\n2) Write a test - use items returned in request (javascript body)  to validate\n\n\nResources - built into postman\n\n1) Chai Assertion Library - human readable syntax - https://www.chaijs.com/api/bdd/\n- example chair empty array syntax - expect([]).to.be.an('array').that.is.empty;"
							},
							"response": []
						},
						{
							"name": "Assertion Basics",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": ""
								},
								"description": "Strings in JavaScript need to be surrounded by simple or double quotes. IF the quotes are missing, JavaScript will try to resolve the names as variables\n\nIf strings, ints, etc are not defined they are seen as undefined initially in JavaScript"
							},
							"response": []
						},
						{
							"name": "Assertion 1 - .eql with extra parameter Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "65776d25-ed83-455a-935e-4268b513948a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const respStatus = pm.response.status;",
											"console.log(respStatus);",
											"",
											"const respCode = pm.response.code;",
											"console.log(respCode);",
											"",
											"const response = pm.response.json();",
											"console.log(response);",
											"",
											"",
											"pm.test(\"Response Code is 200\", function () {",
											"    pm.expect(respCode).to.eql(200, 'Failed respCode does not equal 200');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSETION we perform simple GET within the Test section we log the below then check whichever value the user chooses to use to ensure the test passed. \n\n- log the status, \n- status code and \n- response of the entire json \n\nFurthermore within the .eql we learn that the .eql can take ane extra parameter where you can add your own logging for traceability for instance\n\n\npm.test(\"Response Code is 200\", function () {\n    pm.expect(respCode).to.eql(200, 'Failed respCode does not equal 200');\n});"
							},
							"response": []
						},
						{
							"name": "Assertion 2 - compraing objects with .eql Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"Comparing two objects PASS\", function () {",
											"    let a = {",
											"        \"name\":  \"John\"",
											"    };",
											"    let b = {",
											"        \"name\":  \"John\"",
											"    };",
											"    pm.expect(a).to.eql(b);",
											"});",
											"",
											"",
											"pm.test(\"Comparing two objects FAIL\", function () {",
											"    let a = {",
											"        \"name\":  \"John\"",
											"    };",
											"    let b = {",
											"        \"name\":  \"Joe\"",
											"    };",
											"    pm.expect(a).to.eql(b, \"Different Name FAIL\");",
											"});",
											"",
											"pm.test(\"Comparing two objects FAIL\", function () {",
											"    let a = {",
											"        \"name\":  \"John\"",
											"    };",
											"    let b = {",
											"        \"name\":  \"John\",",
											"        \"age\": 19",
											"    };",
											"    pm.expect(a).to.eql(b, \"Different content FAIL\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we perform a simple GET and imagining we have two objects (a and b) to a compairson using .eql. The .eql compares the objects within a and b, not a and b themselves.\n\npm.test(\"Comparing two objects PASS\", function () {\n    let a = {\n        \"name\":  \"John\"\n    };\n    let b = {\n        \"name\":  \"John\"\n    };\n    pm.expect(a).to.eql(b);\n});\n\n\npm.test(\"Comparing two objects FAIL\", function () {\n    let a = {\n        \"name\":  \"John\"\n    };\n    let b = {\n        \"name\":  \"John\",\n        \"age\": 19\n    };\n    pm.expect(a).to.eql(b, \"contens of a do not equal contents b\");\n});"
							},
							"response": []
						},
						{
							"name": "Assertion 2a - .eql vs .equal Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"Comparing two objects .eql\", function () {",
											"    let a = {",
											"        \"name\":  \"John\"",
											"    };",
											"    let b = {",
											"        \"name\":  \"John\"",
											"    };",
											"    pm.expect(a).to.eql(b);",
											"});",
											"",
											"",
											"pm.test(\"Comparing two objects .equal FAIL\", function () {",
											"    let a = {",
											"        \"name\":  \"John\"",
											"    };",
											"    let b = {",
											"        \"name\":  \"John\"",
											"    };",
											"    pm.expect(a).to.equal(b, \"a does not equal b\");",
											"});",
											"",
											"pm.test(\"Comparing two objects .equal PASS\", function () {",
											"    let a = {",
											"        \"name\":  \"John\"",
											"    };",
											"    let b = {",
											"        \"name\":  \"John\",",
											"        \"age\": 19",
											"    };",
											"    pm.expect(a).to.equal(a, \"a does equal a\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we notice the differences between .eql and .equal\n\n.eql = compares the items within the object itself, i.e... a = \"John\" and b =\"John\"\n.equal = compares the object names themslves, i.e a is not equal to b so it will fail (instation of variables)\n\nRULE OF THUMB - never a good idea to use .equal because checking the object values is mostly likely what you will be comparing, i.e... .eql\n\npm.test(\"Comparing two objects .eql\", function () {\n    let a = {\n        \"name\":  \"John\"\n    };\n    let b = {\n        \"name\":  \"John\"\n    };\n    pm.expect(a).to.eql(b);\n});\n\npm.test(\"Comparing two objects .equal\", function () {\n    let a = {\n        \"name\":  \"John\"\n    };\n    let b = {\n        \"name\":  \"John\"\n    };\n    pm.expect(a).to.equal(b);\n});"
							},
							"response": []
						},
						{
							"name": "Assertion 2b - Reverting Assertions .not.eql",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"Comparing two objects REVERT .not.eql\", function () {",
											"    let a = {",
											"        \"name\":  \"John\"",
											"    };",
											"    let b = {",
											"        \"name\":  \"Jane\"",
											"    };",
											"    pm.expect(a).to.not.eql(b, \"a does not equal b using .not.eql\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we will REVERT so a does not equal b usig .not.eql\n\npm.test(\"Comparing two objects REVERT .not.eql\", function () {\n    let a = {\n        \"name\":  \"John\"\n    };\n    let b = {\n        \"name\":  \"Jane\"\n    };\n    pm.expect(a).to.not.eql(b);\n});"
							},
							"response": []
						},
						{
							"name": "Assertion 2c - Boolean Assertions (true, false, null, undefined, empty array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"Boolean Assertion pass TRUE\", function () {",
											"    pm.expect(true).to.be.true",
											"});",
											"",
											"pm.test(\"Boolean Assertion pass FALSE\", function () {",
											"    pm.expect(false).to.be.false;",
											"});",
											"pm.test(\"Boolean Assertion fail FALSE\", function () {",
											"    pm.expect(true).to.be.false;",
											"});",
											"",
											"pm.test(\"Boolean Assertion pass NULL\", function () {",
											"    pm.expect(null).to.be.null;",
											"});",
											"",
											"pm.test(\"Boolean Assertion pass Undefined\", function () {",
											"    pm.expect(undefined).to.be.undefined;",
											"});",
											"",
											"pm.test(\"Boolean Assertion pass Empty Array\", function () {",
											"    pm.expect([]).to.be.empty;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we will show a boolean assertion using \n- to.be.true --TRUE\n- to.be.false --FALSE\n- to.be.null  --NULL\n- to.be.undefined --UNDEFINED\n- to.be.empty ---EMPTY ARRAY"
							},
							"response": []
						},
						{
							"name": "Assertion 2d - Boolean Assertions  empty array in depth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Boolean Assertion pass Empty Array\", function () {",
											"    pm.expect([]).to.be.empty;",
											"});",
											"",
											"pm.test(\"Boolean Assertion pass Empty Array w/ Length\", function () {",
											"    pm.expect([]).to.be.0;",
											"});"
										],
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we will show a boolean assertion using multiple examples of verifying that an array is empty \n\n- pm.expect([]).to.be.empty; --easier to read and better to use for logic comparison/case\n- pm.expect([].length).to.eql(0);  --array size verification more technical"
							},
							"response": []
						},
						{
							"name": "Assertion 2e - Array Assertions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"Array Assertion w/ element - include PASS\", function () {",
											"    pm.expect([1,2,3]).to.include(2);",
											"});",
											"",
											"pm.test(\"Array Assertion w/ elements - include FAIL\", function () {",
											"    pm.expect([1,2,3]).to.include(4);",
											"});",
											"",
											"",
											"pm.test(\"Array Assertion w/ elements - oneOf PASS\", function () {",
											"    pm.expect(1).to.be.oneOf([1,2,3]);",
											"});",
											"",
											"",
											"pm.test(\"Array Assertion w/ elements - oneOf FAIL\", function () {",
											"    pm.expect(1).to.be.oneOf([2,3]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we will show array assertions \n-  pm.expect([1,2,3]).to.include(2);  --one of the array items to include the number 2\n-  pm.expect(2).be.oneOf([1,2,3]);  --INTEGER one specific value to be one of multiple values"
							},
							"response": []
						},
						{
							"name": "Assertion 2f - Regular Expression Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"Regular Expression Assertion - string PASS\", function () {",
											"    pm.expect('John Doe').match(/^John/);",
											"});",
											"",
											"pm.test(\"Regular Expression Assertion - string FAIL\", function () {",
											"    pm.expect('Jane Doe').match(/^John/);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we will show regular expression assertions\n- pm.expect('John').math(/^John/) - STRING match ensuring begining part of it matches John"
							},
							"response": []
						},
						{
							"name": "Assertion 2g - Examples Assertions (int, string, undefined)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"let XXXX = VALUE then verify using .eql - integer PASS\", function () {",
											"    let numberInt = 5;",
											"    pm.expect(numberInt).to.eql(5);",
											"    console.log(\"number int \" + numberInt);",
											"});",
											"",
											"pm.test(\"let XXXX = 'VALUE' then verify using .eql - string FAIL\", function () {",
											"    let numberString = '5';",
											"    console.log(\"number string \" + numberString);",
											"    pm.expect(numberString).to.eql(5);",
											"});",
											"",
											"",
											"pm.test(\"let XXXX = undefined then verify using .eql - int PASS\", function () {",
											"    let numberUndefinedPass;",
											"    pm.expect(numberUndefinedPass).to.eql(undefined);",
											"    console.log(\"number undefined PASS \" + numberUndefinedPass);",
											"});",
											"",
											"pm.test(\"let XXXX = undefined then verify using .eql - int FAIL:\", function () {",
											"    let numberUndefinedFail;",
											"    console.log(\"number undefined FAIL \" + numberUndefinedFail);",
											"    pm.expect(numberUndefinedFail).to.eql(null);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we show examples \n- let XXX = VALUE then verify using .eql - PASS - INT\n- let XXX = 'VALUE' then verify using .eql - FAIL - STRING\n- let XXX = undefined value - PASS - undefined (used for number)\n- let XXX = undefined value - FAIL - NULL (used for string)"
							},
							"response": []
						},
						{
							"name": "Assertion 2h - emptry string and null string",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03e21c1-0a35-4d10-9ef5-3feda46a510b",
										"exec": [
											"pm.test(\"let XXXX = VALUE then verify using .eql - integer PASS\", function () {",
											"    let numberInt;",
											"    if (pm.expect(numberInt).to.eql(undefined))",
											"    {",
											"        let emptyString = '';",
											"        console.log(\"emptyString is \" + emptyString);",
											"        pm.expect(emptyString).to.eql('');",
											"    }",
											"    ",
											"});",
											"",
											"pm.test(\"let XXXX = null then verify using .eql - integer PASS\", function () {",
											"    let StringInt = null;",
											"    console.log(\"StringInt is \" + StringInt);",
											"    pm.expect(StringInt).to.eql(null);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{GitHubPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{GitHubUserName}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.github.com/user/repos",
									"protocol": "https",
									"host": [
										"api",
										"github",
										"com"
									],
									"path": [
										"user",
										"repos"
									]
								},
								"description": "In this ASSERTION we show examples of \n- undefined strings\n- null strings"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assertion on Arrays - CONTINUE HERE",
					"item": [
						{
							"name": "Assertion on Arrays - Static Array with Multiple Objects",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea681f3f-1a43-47df-8e7e-f59f01ff7b6c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"console.log(jsonData);",
											"console.log(jsonData.filters);",
											"",
											"console.log(jsonData.filters[0].id); //obtain filter element item 0 property value id",
											"console.log(jsonData.filters[2].name);  //obtain filter element item 2 property value name",
											"console.log(jsonData.filters[2].isAllowed); //obtain filter element item 2 propert value isAllowed",
											"",
											"let manufacturer = jsonData.filters[2]; //manufaturer will equal all values in elmement item 2",
											"",
											"pm.test(\"Manufacturer should not be allowed\", function () {",
											"    pm.expect(manufacturer.name).to.eql(\"MANUFACTURER\");  //checking manufacturer to = expected value",
											"    pm.expect(manufacturer.isAllowed).to.eql(false);  //checking for false",
											"    pm.expect(manufacturer.isAllowed).to.be.false; //alternate way of checking for false",
											"    console.log(\"Pass\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://www.mocky.io/v2/5ab350d62f00005a00ca3663",
									"protocol": "http",
									"host": [
										"www",
										"mocky",
										"io"
									],
									"path": [
										"v2",
										"5ab350d62f00005a00ca3663"
									]
								},
								"description": "In this ASSERTION we are using this 'Mock Response' from resource\n- Mock Response URL - http://www.mocky.io/v2/5ab350d62f00005a00ca3663\n- We want to grab some property values from objects within a specific elementy item within the array \n  --object.array.[element in array].propertyvalue\n\n\nTO DO THIS we need to\n- parse response body - const jsonData = pm.response.json(); -- this javascript object is now parsed into json data\n- obtain all elements in array information - jsonData.filters; --this is for items within array\n- for element in array obtain property value  - jsonData.filters[X].value \n\nTO LEARN\n- use console.log to try and understand how to pull the correct json data you expect\n\n\nGOAL\n- we want to ensure the manufacture name and isAllowed values are returned correctly in the response"
							},
							"response": []
						},
						{
							"name": "Assertion on Arrays - Dynamic Array with Multiple Objects Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea681f3f-1a43-47df-8e7e-f59f01ff7b6c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"console.log(jsonData);",
											"console.log(jsonData.filters);",
											"",
											"let manufacturer;",
											"console.log(manufacturer);",
											"",
											"for (let filters of jsonData.filters){  //jsonData.filters is all items in array filters from response",
											"",
											"    console.log(\"filters \" + filters);  //shows you all elements in array filters from response",
											"    console.log(\"filters name \" + filters.name); //shows you filters.name values in array",
											"    ",
											"    //checking for MANUFACTURER name by iterating through array",
											"    if (filters.name === 'MANUFACTURER')",
											"    {",
											"        console.log(\"Elemnts with Array being returned \" + filters); //should only return items associated with Manufacturer ",
											"        console.log(\"Checking isAllowed value \" + filters.isAllowed); //check isAllowed value",
											"        ",
											"        manufacturer = filters;  //set manufacturer",
											"        console.log(manufacturer); //to ensure manufacture equals filters",
											"        ",
											"        ",
											"        //writing test case to ensure manufacturer isAllowed value is correct",
											"        ",
											"        if(pm.expect(manufacturer.isAllowed).to.eql(false)) ",
											"        {",
											"            console.log (\"Pass\");  //test passes",
											"        }",
											"    }",
											"}",
											"",
											"",
											"pm.test(\"Manufacturer iSAllowed should be false\", function () {",
											"    pm.expect(manufacturer.isAllowed).to.eql(false);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://www.mocky.io/v2/5ab350d62f00005a00ca3663",
									"protocol": "http",
									"host": [
										"www",
										"mocky",
										"io"
									],
									"path": [
										"v2",
										"5ab350d62f00005a00ca3663"
									]
								},
								"description": "RULE - if you dont know property name iterate through objects. Example in this is common practice on how it should be used\n\nIn this ASSERTION we are using this 'Mock Response' from resource\n- Mock Response URL - http://www.mocky.io/v2/5ab350d62f00005a00ca3663\n- We want to grab some property values from objects within a specific elementy item within the array DYNAMICALLY\n  --object.array.[element in array].propertyvalue\n\n\nTO DO THIS we need to\n- iterate over filters array and search for what we are trying to find -- jsonData.filters\n- javascript document - for loop - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n\nTO LEARN\n- use console.log to try and understand how to pull the correct json data you expect\n\n\nGOAL\n- we want to ensure the manufacture name and isAllowed values are returned correctly in the response"
							},
							"response": []
						},
						{
							"name": "Asssertions on Nested Objects - properties",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39a94a52-f080-4f8a-99fb-9f5a33108d6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json(); //obtain all json data to be able to parse",
											"",
											"console.log(typeof jsonData); //returns variable type of jsonData",
											"console.log(jsonData); //inside you will see prefs and comments objects",
											"console.log(jsonData.prefs);  //inside you will see prefs object properties",
											"console.log(jsonData.prefs.comments.status); //nested property comments status",
											"",
											"let commentStatus = jsonData.prefs.comments.status; //store comments status value",
											"",
											"console.log(commentStatus); //log commentState to ensure correct value ",
											"",
											"//create test case for verfiyng Prefs Comment Status",
											"pm.test(\"Comment status should be disabled\", function () {",
											"    pm.expect(commentStatus).to.eql(\"disabled\");",
											"});",
											"",
											"",
											"//Create test case for verifying Limits totalPerMember status",
											"//console.log(jsonData.limits.54bba24af6196bd5f824e563);  //produces syntax error becuse of how property is named",
											"console.log(jsonData.limits['54bba24af6196bd5f824e563']);  //bypass using bracket conditions with string in qoutes",
											"",
											"",
											"console.log(jsonData.limits['54bba24af6196bd5f824e563'].boards.totalPerMember.status);",
											"",
											"let boardStatus = jsonData.limits['54bba24af6196bd5f824e563'].boards.totalPerMember.status;",
											"",
											"console.log(boardStatus)",
											"",
											"pm.test(\"Limits totalPerMember Status should be ok\", function () {",
											"    pm.expect(boardStatus).to.eql(\"ok\");",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://www.mocky.io/v2/5ab34d8c2f00006600ca3652",
									"protocol": "http",
									"host": [
										"www",
										"mocky",
										"io"
									],
									"path": [
										"v2",
										"5ab34d8c2f00006600ca3652"
									]
								},
								"description": "In this example we are using the 'MOCK' response using the below resource\n- http://www.mocky.io/v2/5ab34d8c2f00006600ca3652\n- loop javascript resource - https://bitsofco.de/for-in-vs-for-of/\n- java script documentation - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n\nUnderstanding Nested Object Properties - Comment Status\n- Using below example observe once you grab json data and can parse it then you for \"prefs\" you can navigate the nested properties as in depth as you want, prefs.commets.status for example (use console.log to understand)\n\n{\n\t\"id\": \"5ab34c7b0ba0f8932222352c\",\n\t\"name\": \"My board 7\",\n\t\"prefs\": {\n\t\t\"permissionLevel\": \"private\",\n\t\t\"voting\": \"disabled\",\n\t\t\"comments\": {\n\t\t\t\"status\": \"disabled\",\n\t\t\t\"count\": 0\n\t\t}\n\t},\n\t\n\nUnderstanding Nested Object Properties - Limit Status with random property name\n- use special notation with brackets to bypass so error not thrown\n- limits['RANDOM PROPERTY NAME'].\n\n\"limits\": {\n\t\t\"54bba24af6196bd5f824e563\": {  //RANDOM PROPERTY NAME\n\t\t\t\"boards\": {\n\t\t\t\t\"totalPerMember\": {\n\t\t\t\t\t\"count\": 1,\n\t\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\t\"disableAt\": 56050,\n\t\t\t\t\t\"warnAt\": 53100\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}"
							},
							"response": []
						},
						{
							"name": "Asssertions on Nested Objects - properties random String",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "39a94a52-f080-4f8a-99fb-9f5a33108d6f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json(); //obtain all json data to be able to parse",
											"",
											"",
											"//Create test case for bypassing random limits GUID",
											"",
											"//console.log(jsonData.limits.54bba24af6196bd5f824e563);  //produces syntax error becuse of how property is named",
											"//console.log(jsonData.limits['54bba24af6196bd5f824e563']);  //bypass using bracket conditions with string in qoutes",
											"//console.log(jsonData.limits);",
											"",
											"let boardStatus; //undefined",
											"let limitsRanGuid; //undefined",
											"",
											"//enumerating over obects can be done similar like array",
											"for (let keys in jsonData.limits)",
											"{",
											"    //log all object of limits -- only item 54dsalkdfs - RANDOM GUID",
											"    console.log(\"keys are \" + keys, jsonData.limits[keys]);",
											"    ",
											"    //making sure this randomGuid is the correct one for boards as IT MAY NOT BE",
											"    //use hasOwnProperty to check that an object has a specific property you are looking for",
											"    if (jsonData.limits[keys].hasOwnProperty('boards')) //returns true or false will be returned",
											"    {",
											"        limitsRanGuid = keys;",
											"        //i could comment out the above line and put this below",
											"        //boardStatus = jsonData.limits[limitsRanGuid].boards.totalPerMember.status;",
											"    }",
											"}",
											"",
											"",
											"console.log(\"limits random guid is \" + limitsRanGuid);  //log limitsRanGuid value",
											"console.log(jsonData.limits[limitsRanGuid].boards.totalPerMember.status);  //log with new value substituted",
											"",
											"boardStatus = jsonData.limits[limitsRanGuid].boards.totalPerMember.status; //store status value",
											"console.log(\"boardStatus is \" + boardStatus);",
											"",
											"//Test Case snruing limit totalPerMember status is \"ok\"",
											"pm.test(\"Limits totalPerMember Status should be ok\", function () {",
											"    pm.expect(boardStatus).to.eql(\"ok\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://www.mocky.io/v2/5ab34d8c2f00006600ca3652",
									"protocol": "http",
									"host": [
										"www",
										"mocky",
										"io"
									],
									"path": [
										"v2",
										"5ab34d8c2f00006600ca3652"
									]
								},
								"description": "RULE - if you dont know property name iterate through objects. Example in this is common practice on how it should be used\n\nIn this example we are using the 'MOCK' response using the below resource\n- http://www.mocky.io/v2/5ab34d8c2f00006600ca3652\n- loop javascript resource - https://bitsofco.de/for-in-vs-for-of/\n- java script documentation - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n\n\nUnderstanding Nested Object Properties - Limit Status with random property name\n- continuing with previous exmaple we need to write test case way in a way to capture RANDOM PROPERTY NAME and as the string may always be changing\n- also want to ensure that once we capture random string that is the correct one as there could be multiple ones, for this we use hasOwnProperty \n\n\"limits\": {\n\t\t\"54bba24af6196bd5f824e563\": {  //RANDOM PROPERTY NAME\n\t\t\t\"boards\": {\n\t\t\t\t\"totalPerMember\": {\n\t\t\t\t\t\"count\": 1,\n\t\t\t\t\t\"status\": \"ok\",\n\t\t\t\t\t\"disableAt\": 56050,\n\t\t\t\t\t\"warnAt\": 53100\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\nhasOwnProperty reading\n- If you only want to consider properties attached to the object itself, and not its prototypes, use getOwnPropertyNames() or perform a hasOwnProperty() check (propertyIsEnumerable() can also be used). Alternatively, if you know there won't be any outside code interference, you can extend built-in prototypes with a check method."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assignment 7 - Testing Headers and cookies",
					"item": [
						{
							"name": "Test - obtaining headears ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5b567f6-c03e-468c-9b64-426e1fe42965",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json(); //obtain all json data to be able to parse",
											"",
											"",
											"//Obtain header information from Response",
											"const xCache = pm.response.headers.get('X-Cache');",
											"const headersConType = pm.response.headers.get('Content-Type');",
											"const headerDate = pm.response.headers.get('Date');",
											"const headersContLength = pm.response.headers.get('Content-Length');",
											"const headersSozuID = pm.response.headers.get('Sozu-Id');",
											"",
											"console.log(\"xCache is \" + xCache);",
											"console.log(\"headersConType is \" + headersConType);",
											"console.log(\"headerDate is \" + headerDate);",
											"console.log(\"headersContLength is \" + headersContLength);",
											"console.log(\"headersSozuID is \" + headersSozuID);",
											"",
											"//Testing correct values are seen",
											"",
											"//Header X-Cache is not existing useing to.have.header  --SHOULD FAIL",
											"pm.test(\"Header X-Cache value check using to.have.header\", function () {",
											"    pm.expect(pm.response.to.have.header('X-Cache')); ",
											"});",
											"",
											"//pm.expect(a).to.equal(b, \"a does not equal b\");",
											"",
											"//Header X-Cache not existing",
											"pm.test(\"Header X-Cache is undefined\", function () {",
											"    pm.expect(xCache).to.eql(undefined);",
											"});",
											"",
											"",
											"//Headers Content-Type length has correct value",
											"pm.test(\"Header Content-Type is correct value\", function () {",
											"    pm.expect(headersConType).to.eql(\"application/json; charset=UTF-8\");",
											"});",
											"",
											"",
											"//And so on for the rest of the teasts",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://www.mocky.io/v2/5ab34d8c2f00006600ca3652",
									"protocol": "http",
									"host": [
										"www",
										"mocky",
										"io"
									],
									"path": [
										"v2",
										"5ab34d8c2f00006600ca3652"
									]
								},
								"description": "So far we have only looked into the status code and the response body for writing tests. But you can also make assertions on the headers or cookies. For testing we are using the URL http://www.mocky.io/v2/5ab34d8c2f00006600ca3652 to obtain information\n\n\nHeaders - This is how you retrieve a header from the response:\n- pm.response.headers.get('X-Cache') \n\nand in a test:\n- Header exists: pm.response.to.have.header(X-Cache');  \n- Header has value: pm.expect(pm.response.headers.get('X-Cache')).to.eql('HIT');"
							},
							"response": []
						},
						{
							"name": "Test - obtaining cookies",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c9db4ed-d09c-4f14-8319-e00c9f1daabf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"",
											"const cookieNameValue = pm.cookies.get('sails.sid');",
											"console.log(cookieNameValue);",
											"",
											"",
											"//Verying Cookie Name",
											"pm.test(\"Cookie Name Value\", function () {",
											"    pm.expect(pm.cookies.get('sails.sid')).to.eql(cookieNameValue);",
											"});",
											"",
											"//Verifing Cookie Exists foo1",
											"pm.test(\"Cookie name foo1 exists\", function () {",
											"    pm.expect(pm.cookies.has('foo1')).to.be.true;",
											"});",
											"",
											"",
											"//Verifying Cookie foo2 value",
											"const foo2Value = pm.cookies.get('foo2');",
											"console.log(foo2Value);",
											"",
											"pm.test(\"Cookie foo2 Value\", function () {",
											"    pm.expect(pm.cookies.get('foo2')).to.eql(foo2Value);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
									"protocol": "https",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"cookies",
										"set"
									],
									"query": [
										{
											"key": "foo1",
											"value": "bar1"
										},
										{
											"key": "foo2",
											"value": "bar2"
										}
									]
								},
								"description": "So far we have only looked into the status code and the response body for writing tests. But you can also make assertions on the headers or cookies.\n\nNOT all websites return cookies, for this example use postman example URL to test\n- URL - https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2\n- documentation - https://docs.postman-echo.com/\n\n\nCookies - In a similar fashion you can test cookies as well.\n\nCookie exists:\n- pm.expect(pm.cookies.has('sessionId')).to.be.true; \n\n\nCookie has value:\n- pm.expect(pm.cookies.get('sessionId')).to.eql(’ad3se3ss8sg7sg3');"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Section 7 - Automatically Running Tests  - CI",
			"item": [
				{
					"name": "Test Collection",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Utilizing Collection Runner",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Some things to Note\n1. You can choose which collections you would like to run\n2. You can choose which folders within each collection you would like to run\n3. Only saved requests and saves collections will be seen in the collection runner \n- meaning ensure YOU SAVE EVERYTHING before running collection runner\n\n\nTo Bring Up\n1. Arrow on collection to bring up Collection Runner\n2. Select [Run]\n3. Choose the collections, collection within folders, etc... you want to run\n4. Choose how often you want to run the collections, etc..."
					},
					"response": []
				},
				{
					"name": "Postman Monitors",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Postman allows you to do the following (mostly a pro feature)\n1. Run your API Tests at regular internvals (say 11:00 PM every day)\n\nTo Bring Up\n1. Arrow on collection to bring up Collection Runner\n2. Select Monitor Tab\n3. Set how frequently you want to run your collections\n\nNote - within the Monitor you can use the advanved preferences to send emails after runs complete if fail, or complete Or you just want to know they ran\n\nTo Monitor the Monitor SetUp\n1. Select the Monitor once created\n2. New Window will open up and log you into your account\n3. Select [Run] and watch it go on the interval you selected"
					},
					"response": []
				},
				{
					"name": "Automatiing Newman + Integration with Jenkins",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Automatic API Testin\n- collection runnr in postman\n- postman monitors\n- integrate with any integrate software like Newman (gateway to all of this)\n- \n\nAutomation Pros\n- reduces repitive work\n- allows you to focus on other high priorit items\n- get automatic feedback if something passes / fails\n- identify bugs early in automatic process\n\nManual Testing\n- same as always"
					},
					"response": []
				},
				{
					"name": "NodeJS and NPM",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Short introduction to NodeJs and NPM\nThe next lectures will introduce some new tools and software and is rather advanced. I am in the process of recording more detailed videos on this section but until they are ready, where are some general information you should be aware of.\n\nOverview of the NodeJs and NPM ecosystem\nNodeJs is a JavaScript runtime environment that can execute JavaScript without opening a browser. Newman runs inside the NodeJs runtime environment, so this is why NodeJs needs to be installed (locally on your computer or on the server running Jenkins or any other CI server). More details on nodejs.org.\n\nNPM is the Node Package Manager. This is like a repository of projects and has knowledge of what requirements each project has. For example, you want to install Newman, but it depends on other libraries which themselves depend on other libraries. To figure out all the dependencies each project needs, you just need to have NPM installed and NPM will do this work for you. \n\nIn the next video, I have defined Newman as a dependency for my project. This means that the project I have created, cannot run without Newman. When NPM checks the packages.json file, it will figure out what it needs to install, in order for my project to run.\n\n\n\nInstallation\nWindows - basic installation steps can be found here: http://nodesource.com/blog/installing-nodejs-tutorial-windows/\n\nGeneral tip: always restart Windows after installing new software.\n\nmacOS\n\n- with Homebrew (my preferred way) - https://www.dyclassroom.com/howto-mac/how-to-install-nodejs-and-npm-on-mac-using-homebrew\n\n- without - https://coolestguidesontheplanet.com/installing-node-js-on-macos/\n\nLinux \n\n- with Ubuntu\n\n- for other distros, please just search for \"install node and npm on ...\"\n\nCross-platform\n\nIf you are familiar with Docker, there is a Docker image that has Newman and all the dependencies already installed. Just let me know so that I can point you in the right direction."
					},
					"response": []
				},
				{
					"name": "Newman Installation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Newman \n\nInstallation\n- in order to install you must have NodeJS and NPM already installed\n- node --version = command to run in terminal to check if you have nodejs installed\n- npm --version = command to run in terminal to check if you have npm installed\n- npm -install -g newman = command to run in terminal to install newman\n- newman --version = command to run in terminal to check if newman installed sucessfully\n\n\nOverview + Benefits\n- Allows you to use a CLI to run the collection directly from the terminal.\n- Think of how it can be used for continuous integration and automation, postman always needs interaction.\n- This tool fills the need of understanding Postman and Jenkings, MIDDLEWARE"
					},
					"response": []
				},
				{
					"name": "Trouble Installing Newman / NodeJS - NPM",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Troubleshooting Node.js / npm / Newman Problems (for Windows)\nWindows - Troubleshooting Node.js / npm / Newman Problems\n=======================================================\n1. Node.js cannot be called from the command prompt\nOnce you have successfully installed Node and restarted your computer, when you open a command prompt terminal and type in node -v, you get an error and not a version like v6.9.5\n\nPossible solution\n\nIn Windows, you need to set node.js folder path into system variables.\n\n1) open Control Panel -> System and Security -> System -> Advanced System Settings -> Environment Variables\n\n2) in \"System variables\" find variable PATH and add node.js folder path as value. Usually it is C:\\Program Files\\nodejs;. If variable doesn't exists, create it. \n\n3) Restart your computer.\n\n2. Newman cannot be called from the command prompt\nOnce you have installed newman and restarted your computer, when you open a command prompt terminal and type in newman --version, you get an error and not a version like v4.1.0\n\nPossible solution\n\nIn Windows, you need to set the folder where node.js is storing global dependencies into system variables.\n\n1) open Control Panel -> System and Security -> System -> Advanced System Settings -> Environment Variables\n\n2) in \"System variables\" find variable PATH and add the folder path as value. Usually it is something like: C:\\Users\\YOURUSERNAME\\AppData\\Roaming\\npm\n\nInside the folder you should see a file called newman.\n\n3) Restart your computer."
					},
					"response": []
				},
				{
					"name": "Running a collection with Newman",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "To run a collection in newman via the CLI there are many ways in which you can do it.\n\nThe easiest is to use a URL\n- newman run {URL}\n- example - newman run https://www.postman.com/collections/f36406f34fcc7d4e0502\n- github collection resouce where you can download then upload into Postman - https://github.com/vdespa/httpbin-postman-tests"
					},
					"response": []
				},
				{
					"name": "Updating Newman",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Ensuring you have the latest newman is good as somethings that might have been working break and updating may fix things, also though it may be vice versa to check to ensure\n\nMigration Guide if needed\n- https://github.com/postmanlabs/newman/blob/develop/MIGRATION.md\n\nChecking Update\n- newman --version -  shows version \n- npm outdated -g --show if anything you have related is out of date ona global level\n  - anything out of date will be shown only\n\nGoing to specific version of newman (backwords compatible, etc... say update breaks a lot of things)\n- npm install -g newman@4.0.0  - this command will install newman version 4.0.0 eventhough you may be in a later version\n\nInstallating newman reporter\n- nmp install -g newman-reporter-html = this command will intstall newman reported (no longer installed automatically)\n  - HTML reporter for Newman that provides the information about the collection run in HTML format. This needs to be used in conjunction with Newman so that it can recognize HTML reporting options.\n\nto update newman use the below resource via github as one method for a resource\n- https://github.com/postmanlabs/newman"
					},
					"response": []
				},
				{
					"name": "Accessing Collection from Newman",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Newman documentation\n- https://github.com/postmanlabs/newman\n\n\nUpdating Collection (Using resource 'Postman collection' which is below)\n- a collection being run via Newman CLI will NOT update unless you UPDATE the Collection(run button)->Share->Get Public link\n  - although this works we want to rely on as less human invervention as possible so we do the following\n    - simply click the 3 dot menu item for the collection (...)-> export->save with default name usually works the best->navigate to folder via terminal->run cillection like you have been"
					},
					"response": []
				},
				{
					"name": "Using Newman w/ Postman API - Acccess ALL Collections",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections"
							],
							"query": [
								{
									"key": "apikey",
									"value": "PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f"
								}
							]
						},
						"description": "This allows us to simply run and use the postman API as a way to communicate with your API and access your collections\n- Resource - https://github.com/postmanlabs/newman#using-newman-with-the-postman-api\n- URL - https://learning.postman.com/docs/developer/intro-api/#:~:text=Generating%20a%20Postman%20API%20key&text=Select%20a%20workspace%20and%20open,Click%20Generate%20API%20Key\n  - Postman API Keys Page\n  - Generate API Key\n  - Copy and Paste somewhere (PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f)\n \nUse below options to obtain what information you need\n- 1 Fetch a list of your collections from: https://api.getpostman.com/collections?apikey=$apiKey (DONE IN THIS STEP)\n- 2 Get the collection link via it's uid: https://api.getpostman.com/collections/$uid?apikey=$apiKey\n- 3 Obtain the environment URI from: https://api.getpostman.com/environments?apikey=$apiKey\n\n- 4 Using the collection and environment URIs acquired in steps 3 and 4, run the collection as follows:\n\n$ newman run \"https://api.getpostman.com/collections/$uid?apikey=$apiKey\" \\\n    --environment \"https://api.getpostman.com/environments/$uid?apikey=$apiKey\"\n    \n    \nFrom setp 1 we note down the uid for the indivudal collection we are looking to run in the next step, Postman Collection\n- \"uid\" = \"7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b\"\n- \"name\" = \"Postman collection\""
					},
					"response": []
				},
				{
					"name": "Using Newman w/ Postman API - Individual Collections using PM",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections/:uid?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								":uid"
							],
							"query": [
								{
									"key": "apikey",
									"value": "PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f"
								}
							],
							"variable": [
								{
									"key": "uid",
									"value": "7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b"
								}
							]
						},
						"description": "Continuation of Preview step - Using Newman w/ Postman API - Acccess ALL Collections \n \nUse below options to obtain what information you need\n- 1 Fetch a list of your collections from: https://api.getpostman.com/collections?apikey=$apiKey\n- 2 Get the collection link via it's uid: https://api.getpostman.com/collections/$uid?apikey=$apiKey (DONE IN THIS STEP)\n- 3 Obtain the environment URI from: https://api.getpostman.com/environments?apikey=$apiKey\n\n- 4 Using the collection and environment URIs acquired in steps 3 and 4, run the collection as follows:\n\n$ newman run \"https://api.getpostman.com/collections/$uid?apikey=$apiKey\" \\\n    --environment \"https://api.getpostman.com/environments/$uid?apikey=$apiKey\"\n    \n    \nFor this request peforming step 2 we use the values noted within Using Newman w/ Postman API - Acccess ALL Collections for the INDIVIDUAL collection we wanted to run\n- \"uid\": \"7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b\",\n- \"name\": \"Postman collection\","
					},
					"response": []
				},
				{
					"name": "Using Newman w/ Postman API - Obtaining Environments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/environments?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"environments"
							],
							"query": [
								{
									"key": "apikey",
									"value": "PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f"
								}
							]
						},
						"description": "Continuation of Preview step - Using Newman w/ Postman API - Acccess ALL Collections & Individual Collections using PM\n \nUse below options to obtain what information you need\n- 1 Fetch a list of your collections from: https://api.getpostman.com/collections?apikey=$apiKey\n- 2 Get the collection link via it's uid: https://api.getpostman.com/collections/$uid?apikey=$apiKey \n- 3 Obtain the environment URI (uniform resource identifier) from: https://api.getpostman.com/environments?apikey=$apiKey (DONE IN THIS STEP)\n- 4 Using the collection and environment URIs acquired in steps 3 and 4, run the collection as follows:\n\n$ newman run \"https://api.getpostman.com/collections/$uid?apikey=$apiKey\" \\\n    --environment \"https://api.getpostman.com/environments/$uid?apikey=$apiKey\"\n    \n    \nFor this request peforming step 3 and noting down environments uid from newmanProduction since that is associated with the collection - Postman Collection we r using\n- \"uid\": \"7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b\",\n- environment name - \"name\": \"newmanProduction\""
					},
					"response": []
				},
				{
					"name": "Using Newman - specifying environments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Using multiple environments within Newman\n- Name used newmanProduction \n- Collection used to subsistute this value is Postman collection\n\nSubstitution Postman Collection\n- in the postman collection substituting the URL value within an environment variable allows us to passs {{url}}/XXXX for each request\n- HOWEVER, when running the CLI you are fucked because newman  doesnt know how to substitue {{url}} (i.e... access environments like postman does)\n  - {{url}}/get?isGood=true&isBad=false\n\nNewman command line format as seen in documentation\n-newman run <collection-file-source> [options]\n\n\n\nSOLUTION 1 - downloading environments from Postman\n- https://github.com/postmanlabs/newman#command-line-options and look for solution within command line options you think you could use\n- if get stuck go down and solution is posted\n\n\nsolution 1  command line option\n- --environment \"https://api.getpostman.com/collections/$uid?apikey=$apiKey\" --environment \"path/to/environments\"\n  - for environment you need to download the environments from within postman and best is to place in same location as where running command line from (pwd to find)\n  - newman run \"https://api.getpostman.com/collections/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --environment \"newmanProduction.postman_environment.json\" \n\n\nSOLUTION 2 -- appending specific environment variable\n- https://github.com/postmanlabs/newman#command-line-options and look for solution within command line options you think you could use\n- if get stuck go down and solution is posted\n\n\nsolution  command line option \n- --env-var \n  - use --env-var \"<environment-variable-name>=<environment-variable-value>\"\n  - \"https://api.getpostman.com/collections/$uid?apikey=$apiKey\" --env-var \"<environment-variable-name>=<environment-variable-value>\"\nAllows the specification of environment variables via the command line, in a key=value format. Multiple CLI environment variables can be added by using --env-var multiple times, like so: --env-var \"foo=bar\" --env-var \"alpha=beta\"\n  - newman run  \"https://api.getpostman.com/collections/37579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --env-var \"url=https://httpbin.org\"\n \n\nSOLUTION 3 --appending ALL environemnt variables within collection\n- https://github.com/postmanlabs/newman#command-line-options and look for solution within command line options you think you could use\n- if get stuck go down and solution is posted\n\n\nsolution  command line option \n- environment variable uid\n- newman run \"https://api.getpostman.com/collections/$uid?apikey=$apiKey\" --environment \"https://api.getpostman.com/environments/$uid?apikey=$apiKey\"\nAllows the specification of all environment variables via the command line\n  - newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\"\n \nIN JENKINS if you DONT WANT A LONG STRING YOU CAN USE \"\\\" between each command that is run, example below\n- example: nemwan run \"abc\" \\(Enter to create new line after the slash from keyboard) --environment \"bcd\" (this will be on second line)\nnewman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" \\\n--environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\""
					},
					"response": []
				},
				{
					"name": "Using Newman w/ Postman API - Individual Collections using CLI",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/collections/:uid?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								":uid"
							],
							"query": [
								{
									"key": "apikey",
									"value": "PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f"
								}
							],
							"variable": [
								{
									"key": "uid",
									"value": "7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b"
								}
							]
						},
						"description": "Continuation of Preview step - Using Newman w/ Postman API - Acccess ALL Collections - PM\n\nHere we will use the Neman CLI to obtain the same specific colleciton as done in above request.\n- Command - newman run \"URL\"\n-  Note - need to substitute UID path variable in URL since CLI does not know how to substitute \n   - URL - newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" \n     - if using using environment vairable {{url}} then we need to append --env-var \"url=https://httpbin.org\" to the need\n       - newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --env-var \"url=https://httpbin.org\"\n     - if NOT using environment variable then what we have for URL above is fine"
					},
					"response": []
				},
				{
					"name": "Setup - Jenkins Installation + Node&Newman&NPM",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Installing Jenkins on MAC\n- Parent Link - https://www.jenkins.io/doc/book/installing/macos/ \n- Downloading and Installing Jenkins specifically via homebrew - https://www.jenkins.io/download/lts/macos/\n\n\nSteps to Begin\n1. Create a new job in jenkins (select new item)\n2. Need to check if Newman, Node and NPM are all installed on machine running jenkins, THIS IS A MUST\n\t- newman --version\n\t- npm --version\n\t- node --version\n3. Create Job to check, specifically freestyle project option\n4. Enter Name of freestyle project\n5. Select OK\n6. If you dont know go to Configure page select Job and then select Configure option on left navigation pane\n7. When configure loads select General Tab-> [Add a Build Config] drop down and select \"Execute shell\" option\n8. Since we want to check step 2 perform the following commands similar to how we did in terminal\n   node --verison, newman --version, npm --version\n9. Save Configuration\n10. Try a build\n11. If builds fine (build is not red) you can continue to step XX\n12. If build fails you need to install whichever plugins are missing (node, newman, npm) \n   - to install npm - https://plugins.jenkins.io/pipeline-npm/\n   - to install nodejs - https://plugins.jenkins.io/nodejs/\n   - to install newman - https://stackoverflow.com/questions/53142260/run-newman-in-jenkins\n13. Build your project\n\nExpected - all values should be returned successfully\n\n\nJenkins Commands\n- macOS Installers for Jenkins LTS\n- Install the latest LTS version: brew install jenkins-lts.\n- Install a specific LTS version: brew install jenkins-lts@YOUR_VERSION.\n- Start the Jenkins service: brew services start jenkins-lts.\n- Restart the Jenkins service: brew services restart jenkins-lts.\n- Update the Jenkins version: brew upgrade jenkins-lts."
					},
					"response": []
				},
				{
					"name": "WINDOWS - Troubleshooting newman installation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "If the previous request doesnt work try troubelshooting\n\nTroubleshooting Jenkins Problems (for Windows)\n\nIf you are running Jenkins locally, it may happen that you encounter some problems. The most common ones are listed below.\n\nNode and Newman are installed locally but do not work in Jenkins If you are getting a version output for node and newman while opening a terminal but they do not work in Jenkins, it might be related to the fact that Jenkins runs as a different user.\n\nPossible solution #1\n\nIn Windows, you need to set node.js folder path into system variables.\n\n1) open Control Panel -> System and Security -> System -> Advanced System Settings -> Environment Variables\n\n2) in \"System variables\" find variable PATH and add node.js folder path as value. Usually it is C:\\Program Files\\nodejs;. If the variable doesn't exist, create it.\n\nFor newman you also need to add the folder where the newman bin was installed (usually it is something like: C:\\Users\\YOURUSERNAME\\AppData\\Roaming\\npm\n\n3) Restart your computer.\n\nPossible solution #2\n\nPlease also look into the responses on Stackoverflow as well:\n\nhttps://stackoverflow.com/q/53142260/766177\n\nPossible solution #3\n\nContributed by William nkosi to solve the error with \"node: command not found\"\n\nhttps://www.techcoil.com/blog/how-i-make-my-jenkins-slave-windows-service-recognize-the-global-modules-installed-by-npm/\n\nEncoding Problems (\"â”œâ”€â”€ \") If you see a bunch of \"â”œâ”€â”€ \" chars in the Jenkins console output, try one of the following solutions:\n\nPossible solution #1\n\nTry the changes as shown here: https://www.linkedin.com/pulse/how-resolve-utf-8-encoding-issue-jenkins-ajuram-salim/ . After this restart Jenkins and it should work better (contributed by Phil. Many thanks).\n\nPossible solution #2\n\nHave a look at this medium post:\n\nhttps://medium.com/pacroy/how-to-fix-jenkins-console-log-encoding-issue-on-windows-a1f4b26e0db4 (contributed by Javier Gironella San Juan. Many thanks).\n\nPossible solution #3\n\nTry adding ONE of the following newman options to the newman run command:\n\n--disable-unicode\n\n--color off\n\nError: java.io.IOException: Cannot run program \"sh\" This happens if you have specified your Windows command as \"Execute shell\" rather than \"Execute Windows batch command\"."
					},
					"response": []
				},
				{
					"name": "MACOS / LINUX Troubleshooting newman installation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Troubleshooting Jenkins Problems (for macOS, Linux)\nNewman - command not found\nGo to Manage Jenkins.\n\n\n\n\nSelect Manage Nodes.\n\n\nIdentify the node you want to configure (typically master) and click on the gear icon.\n\n\nCreate an environment variable called PATH with the value /usr/local/bin:$PATH\n\n"
					},
					"response": []
				},
				{
					"name": "API Collection - Running w/ Jenkins + Generic Console Report",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Follwoing PreReqs must be run\n1. Perform newman setup\n2. Perform jenkins setup\n3. Configure Project by select Project Name->Configure (http://localhost:8080/job/http_bin_api_tests/configure)\n4. Select Build Tab\n5. Remove previous commands for newman, node and npm since we dont need them anymore\n6. Enter command similar to how we ran newman individual command (newman run \"url\"). Refer to Using Newman - specific environments for information\n   - using share link via PM collection - this \"url\" can be obtained from the share collection section for your collection by copying the share link\n     - newman run \"https://www.getpostman.com/collections/322473cdb4fbe7418229\" --env-var \"url=https://httpbin.org\"\n     - Note if possible ensure you are appending --env-var \"url=https://httpbin.org\" if using env variable for subsitution anywhere\n   - using api key \n     -  newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\"\n       - newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" \\\n--environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\"\n     \n   \n7. Save Configuration\n8. Build Project\n\nExpected - successful run"
					},
					"response": []
				},
				{
					"name": "API Collecton - running with Jenkins + Failures + CLI & JUNIT Reports",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "In this section we see what is the best approach for failures when running api from jenkins\n\nSetup\n1. Configure one item in collection to fail\n2. Rebuild on jenkins\n\nExpected - failure should be reported\n\nPROBLEM\n- if you have a lot of assertions and requests when something fails its not easy to check the console and check for the specific one which failed. This is why using REPORTS that Jenkins supports can be very be beneficial\n\nSOLUTION\n- we can use Newman and configure which reporters we can utilize  https://github.com/postmanlabs/newman#configuring-reporters\n  -  using command -r <reporter-name>, --reporters <reporter-name>\n  -  we specify cli and junit for reporters since thes seem to be the best \n  -  append the following --reporters cli,junit to the already current command we are running from the previous requesst\n\nnewman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" \\\n--environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" \\\n--reporters cli,junit\n\n- now that we have the reporters we want to use we can now specify where we want the file outputted by appending the below\n  - https://github.com/postmanlabs/newman#junitxml-reporter\n    - --reporter-junit-export <path> OR --reporter-junit-export \"newman/reportl.xml\" for example which will be saved INSIDE OUR WORKSPACE\n      - workspace is within location - http://localhost:8080/job/http_bin_api_tests/ws/newman/\n      - if you dont specificy filepath it will get saved into the newman work space by default and have a name like newman-run-report-2021-01-24-20-40-21-088-0.xml"
					},
					"response": []
				},
				{
					"name": "API Collection - Publishing Report in Jenkins - JUNIT",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "In this lesson we publish reports in Jenkins. \n- when we output the file as in the previous step (cli,json) jensking still has NO IDEA about the report so we need to congire it so it does know about it\n- to publish the report perform the below\n1. Select Configuration\n2. Select Post-build actions --these actions get performed about the build has completed\n3. Select \"Publish JUnit test result report\"\n4. You will see several options appear below\n5. We are interested in \"Test Report XML sections\"  --RECALL we created the test report in previous step\n6. Within the location type where we created the test report \"newman/reportl.xml\"\n\t\tNOTE - for torubleshooting its always best to Create the report in a location then publish it so you are sure where you placed it when attempting to publish it\n7. Select Save\n8. Create another build ensuring at least 1 test fails (change 200 to 201 for instance)\n9. Wait for build to finish\n10. Refresh  Page -- we do this so latest build results are seen as page does not auto refresh\n11. Select Last Build\n12. On Last Build page you will notice there is a Test Result section now\n13. Select the Test Results option\n14. Observe you see a detailed result of the failures and passes\n15. Per investivation observe when you drill down you see will see the general reason and also the finalized stack trave\n\nExample - \n\n--All Failed Test\n--Test Name \n- PostmanCollection.Status code is 200\n--Error Details\n\t--expected response to have status code 201 but got 200\nStack Trace\n\t--\n\t\tFailed 1 times.\n\t\tCollection JSON ID: 339a3cd3-53fe-4216-be2d-4902cbcc0c0b.\n        Collection name: Postman collection.\n        Request name: GET with URL Params.\n        Test description: Status code is 200.\n        Error message: expected response to have status code 201 but got 200.\n        Stacktrace: AssertionError: expected response to have status code 201 but got 200\n\nExpected - report should be published and failure information should be see\n\nNOTE - eventually after many reports are run you will see an automatically generated trend callled \"Test Result Trend\" which will show you the last 5-10 builds which have completed and the failures (if any) which have occured within each build"
					},
					"response": []
				},
				{
					"name": "API Collection - Publishing Report in Jenkins - HTML",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Thes are the steps to create an HTML Report in Jenkins.\n\nSETUP \n1. Run the two items below locally\n     - npm install -g newman-reporter-htmlextra \n     - npm install -g newman-reporter-html\n2. From the Global Build configurations (http://localhost:8080/configureTools/) \n2. create two new NodeJS Installations (run them on the CLI server also)\n   -Name = node for both and within each Global npm packages to install use one of the below items\n     - npm install -g newman-reporter-htmlextra \n     - npm install -g newman-reporter-html\n3. Save Changes\n4. Install HTML Publisher Plugin https://plugins.jenkins.io/htmlpublisher/\n   -select item to Donwload and Install after download\n   -wait for jenkins to reboot\n5. EXTRAs INFORMATION - \n   - HTML Reporter Overview  - https://github.com/postmanlabs/newman-reporter-html#readme\n   - Might Need -- Documentation to Install to use HTML Report - https://github.com/postmanlabs/newman#html-reporter\n6. Run scripts in Jenkins (this allows the html report to appear nice, without this the format will be no bueno) -- FIND WAY TO NOT HAVE TO DO THIS\n   - Try to run this script in Jenkins Dashboard > Manage Jenkins > Script Console\n   - System.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\", \"sandbox allow-scripts;\")\n\n\n\nCreating Report\n1. Go to Project  (http://localhost:8080/job/http_bin_api_tests/) if not already there\n2. Select Configure\n3. For Execute Shell add htm reporters to the list, --reporters cli,junit,html\n3. For Execute Shell option add html to --reproters list and add --reporter-html-export \"newman/report.html\" as example report name \n3. Add Post Build Option\n4. Select Publish HTML Reports\n5. For HTML Directory Archive put newman --where report will be published (step 3 without /report.html)\n6. Update index pages to report.html --name of report (step 3 without newman/)\n7. Save \n8. Build\n9. Navigate to Workspaces\n\nExpected - html report should be seen\n\n10. Select HTML Report\n\nExpected - should be formatted nicely"
					},
					"response": []
				},
				{
					"name": "API Collection - Publishing BETTER HTML Reports in Jenkins",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Thes are the steps to create better html reports\n\n1. HTMLExtra - https://www.npmjs.com/package/newman-reporter-htmlextra\n   -allows user to add a little more flexability to html reports\n\n2. Using CLI can perform the follwoing command by appening the htmlextra report to the end (explained in detail in API Collecton - running with Jenkins + Failures + CLI & JUNIT Reports)\n   -newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --reporters cli,htmlextra\n3. Execute CLI command\n\nExpected = CLI Comamnd ran successfully and html reported created within newman workspace wherever it was installed (/Users/JPC/Desktop/newman for me)\n\n4. Within the htmlextra report you can view more details such as in what headers were sent, returned, request sent, body and response, etc.... \n   - To do view htmlextra report and selet TotalRequests for instance\n   - Peak into each request to find the helpful information noted above\n\n5. You can add logging also to the request\n   - URL for Information - https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/\n   - To add logging you could do something like the below within the prerequest script or even from within the Tests section\n     - console.log(pm.info.requestName, 'form the pre request script');\n     - now within the CLI Command append the --reporter option for htmlextra logs OR --reporter-htmlextra-logs\n       -newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --reporters cli,htmlextra --reporter-htmlextra-logs\n\nExpected - when you view any single request the console.log output will be there.\n\n\nTO DO\n1. Figure out how to add html extra to jenkins because that shit dont work, but locally it does, terible\n   - atttempto install html extra via global configurations and using the following node js installation command sudo npm install -g newman-reporter-htmlextra\n   - ensure you configure project shell command by adding htmlextra to reporters (--reporters cli,junit,htmlextra) and to outputting of -report (--report-htmlextra-export \"newman/report\")\n2. Either way you can always hook into jenkins, if a failure is seen on Jenkis run the html extra report locally and view the console logs to troubleshoot"
					},
					"response": []
				},
				{
					"name": "API Collection - Customizing HTML Reports in Jenkins",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Thes are the steps to create more customizeable html reports\n\n1. You can use to https://handlebarsjs.com/ to create your own templte OR\n2. For this exercise we can download some templates from the htmlextra github repo https://github.com/DannyDainton/newman-reporter-htmlextra\n3. From github repo navigate to folder lib for templates you can use\n4. Select One \n5. Select [Raw] option\n6. Save template\n7. open template within text editor if you want\n8. Navigate to body of html file and insert a header ref\n   -example <h1>MY TEST REPORT</h1>\n9. Save and Closer\n10. In Newman we will add a NEW reporter option --reporter-htmlextra-template <path/to/template>\n11. Run same commmand line option as before ensuring you are running this command from the same folder where you saved this html file (cd to it)\n    -newman run \"https://api.getpostman.com/collections/7579022-339a3cd3-53fe-4216-be2d-4902cbcc0c0b?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --environment \"https://api.getpostman.com/environments/7579022-0e940dbe-cc9d-4a88-9a08-cc89837bde19?apikey=PMAK-5fc15a77ce911f004373dd61-f92f9b1a686b1e4eba6fa1a629b0d4b65f\" --reporters cli,htmlextra --reporter-htmlextra-template dashboard-template.hbs.txt \n12.Navigate to where newman is and open the newly created html report\n   - Expected - should see my test report on top\n\n13. Navigate to the newman htmlextras page https://www.npmjs.com/package/newman-reporter-htmlextra and look for \"handlebars helpers\",  htmlextra incorproates some of the built in handlebars-helpers functions\n14. In the top of the search type in handlebars-helpers which should take you here https://www.npmjs.com/package/handlebars-helpers\n15.  Scroll down and navigate to logging, select logging option\n16.  Using logging option example\n    - Observe in template downloaded there is a section with \"Request Information\"  --Request Information</h5>\n17. Below this type \"Debug :{{_inspect response}}\"\n    - still need to figure this out with example\n18."
					},
					"response": []
				},
				{
					"name": "API Collection - Troubleshooting HTML Reports",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "Troubleshooting HTML reports\nMy report is generated in Jenkins but it is not properly formatted\nPlease make sure your result is not empty and that no errors were issued. This only deals with reports that don't look right.\n\nTry to run this script in Jenkins Dashboard > Manage Jenkins > Script Console:\n\nSystem.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\", \"sandbox allow-scripts;\")\n\nRefresh the page and check your report again.\n\nPLEASE NOTE: By running this script you are changing security settings, so make sure to read the following article and get familiar what exactly this script does: https://wiki.jenkins.io/display/JENKINS/Configuring+Content+Security+Policy\n\nContributed by Alexander Tereshkov."
					},
					"response": []
				},
				{
					"name": "API Collection - Running w/ Github Report via Jenkins",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						},
						"description": "The following steps details how to run your postman request from a git repository\n1. Log into Git / Create Account\n2. Upload the following files\n   -environments file for your collection\n   -postman api collection file\n3."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "af8344b6-1d78-4846-8dd3-34a9e8703f9e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f8aa8c62-5e51-41ce-b51c-e827e367850c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c923ad81-b425-43b9-93e3-4a0947a70744",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9faa09f9-db9b-4427-9799-483968cb6b99",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "422871f8-fcd2-4d86-856d-93f08d541a25",
			"key": "twilioAccountSid",
			"value": "AC292f080b5405207fce153878898eae0a",
			"type": "string"
		},
		{
			"id": "e8e76048-6099-43c2-b482-8aa95746428f",
			"key": "twilloKey",
			"value": "SKf02cbad7c15e3910955647b3e7b1eeca",
			"type": "string"
		},
		{
			"id": "97b65d60-32bb-4070-9ecb-653d28c5ad8e",
			"key": "twilioToken",
			"value": "L40J0rb6h1p4gF6f15B0J25NzvxHL6Z9",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}